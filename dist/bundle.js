!function(n){var e={};function r(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s=35)}([function(n,e,r){var t,o,i={},s=(t=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=t.apply(this,arguments)),o}),a=function(n){var e={};return function(n){if("function"==typeof n)return n();if(void 0===e[n]){var r=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}}(),l=null,c=0,p=[],u=r(31);function d(n,e){for(var r=0;r<n.length;r++){var t=n[r],o=i[t.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](t.parts[s]);for(;s<t.parts.length;s++)o.parts.push(y(t.parts[s],e))}else{var a=[];for(s=0;s<t.parts.length;s++)a.push(y(t.parts[s],e));i[t.id]={id:t.id,refs:1,parts:a}}}}function f(n,e){for(var r=[],t={},o=0;o<n.length;o++){var i=n[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};t[s]?t[s].parts.push(a):r.push(t[s]={id:s,parts:[a]})}return r}function m(n,e){var r=a(n.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=p[p.length-1];if("top"===n.insertAt)t?t.nextSibling?r.insertBefore(e,t.nextSibling):r.appendChild(e):r.insertBefore(e,r.firstChild),p.push(e);else if("bottom"===n.insertAt)r.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(n.insertInto+" "+n.insertAt.before);r.insertBefore(e,o)}}function h(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=p.indexOf(n);e>=0&&p.splice(e,1)}function g(n){var e=document.createElement("style");return n.attrs.type="text/css",v(e,n.attrs),m(n,e),e}function v(n,e){Object.keys(e).forEach(function(r){n.setAttribute(r,e[r])})}function y(n,e){var r,t,o,i;if(e.transform&&n.css){if(!(i=e.transform(n.css)))return function(){};n.css=i}if(e.singleton){var s=c++;r=l||(l=g(e)),t=w.bind(null,r,s,!1),o=w.bind(null,r,s,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(n){var e=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",v(e,n.attrs),m(n,e),e}(e),t=function(n,e,r){var t=r.css,o=r.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(t=u(t));o&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([t],{type:"text/css"}),a=n.href;n.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,r,e),o=function(){h(r),r.href&&URL.revokeObjectURL(r.href)}):(r=g(e),t=function(n,e){var r=e.css,t=e.media;t&&n.setAttribute("media",t);if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){h(r)});return t(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var r=f(n,e);return d(r,e),function(n){for(var t=[],o=0;o<r.length;o++){var s=r[o];(a=i[s.id]).refs--,t.push(a)}n&&d(f(n,e),e);for(o=0;o<t.length;o++){var a;if(0===(a=t[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete i[a.id]}}}};var b,x=(b=[],function(n,e){return b[n]=e,b.filter(Boolean).join("\n")});function w(n,e,r,t){var o=r?"":t.css;if(n.styleSheet)n.styleSheet.cssText=x(e,o);else{var i=document.createTextNode(o),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(i,s[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var r=function(n,e){var r=n[1]||"",t=n[3];if(!t)return r;if(e&&"function"==typeof btoa){var o=(s=t,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=t.sources.map(function(n){return"/*# sourceURL="+t.sourceRoot+n+" */"});return[r].concat(i).concat([o]).join("\n")}var s;return[r].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(n,r){"string"==typeof n&&(n=[[null,n,""]]);for(var t={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(t[i]=!0)}for(o=0;o<n.length;o++){var s=n[o];"number"==typeof s[0]&&t[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="("+s[2]+") and ("+r+")"),e.push(s))}},e}},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,"*, *::before, *::after, body {\r\n    margin: 0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-size: 62.5%;\r\n}\r\n\r\n\r\n.container {\r\n    height: inherit;\r\n    width: 80%;\r\n    margin: auto;\r\n}",""])},function(n,e,r){var t=r(2);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){angular.module("app").service("PreviewedImagesService",["$q",function(n){let e=this;e.database={nature:["https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],people:["https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],women:["https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],rain:["https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],forest:["https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"]},this.getImagesBySection=function(r){return console.log(r),n((n,t)=>{n(e.database[r])})}}])},function(n,e){angular.module("app").service("SectionsService",["$q",function(n){this.getSections=function(){return n((n,e)=>{n(["nature","people","women","rain","forest"])})}}])},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,".section-container {\r\n    display: block;\r\n    width:100%;\r\n}\r\n\r\n.carousel-container {\r\n    width:80%;\r\n    margin: 10rem auto;\r\n}\r\n\r\n.carousel {\r\n\r\n}\r\n\r\n.carousel-list {\r\n    /* display: flex;\r\n    position: relative; */\r\n\r\n}\r\n\r\n.carousel-list-item {\r\n\r\n}\r\n\r\n.carousel-img {\r\n    width:100%;\r\n}",""])},function(n,e,r){var t=r(6);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){n.exports='<section class="section-container">\r\n    \r\n    \r\n    <div class="carousel-container">\r\n        <div class="carousel">\r\n            <ul class="carousel-list">\r\n                <li ng-repeat="x in $ctrl.sections track by $index" class="carousel-list-item">\r\n                    <img ng-src="{{x}}" alt="" class="carousel-img">\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div>\r\n        <ul>\r\n            <li ng-repeat="x in $ctrl.sections track by $index">{{x}}</li>\r\n        </ul>\r\n    \r\n        <div class="copy-to-clipboard-container">\r\n            <input type="text" class="copy-to-clipboard-input">\r\n            <button class="copy-to-clipboard-button">Copy</button>\r\n        </div>\r\n    </div>\r\n    \r\n</section>'},function(n,e,r){angular.module("app").component("appSection",{template:r(8),bindings:{sections:"<"},controller:function(){let n=this;n.$onInit=function(){console.log(n.sections)},this.$onChanges=function(n){}}}),r(7)},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,".footer-section {\r\n    background-color: #eeeeee;\r\n   \r\n    \r\n}\r\n\r\n.footer-info-container {\r\n    height: 15rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.footer-info-container > h2 {\r\n    font-size: 3rem;\r\n    color: #1E90FF;\r\n}",""])},function(n,e,r){var t=r(10);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){n.exports='<footer class="footer-section">\r\n    <div class="footer-info-container">\r\n        <h2>All right reserved &copy; Anatolii Yatsenko</h2>\r\n    </div>\r\n</footer>'},function(n,e,r){angular.module("app").component("appFooter",{template:r(12),controller:function(){}}),r(11)},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,".gallery-previewer {\r\n    background-color: white;\r\n}\r\n\r\n\r\n\r\n.gallery-previewer-composition {\r\n    display: block;\r\n    position: relative;\r\n    width:50%;\r\n    margin: auto;\r\n    margin-top: 5rem;\r\n}\r\n\r\n.gallery-previewer-example {\r\n    width: 35rem;\r\n    height: 20rem;\r\n    position: absolute;\r\n    z-index: 1;\r\n    background-size: cover;\r\n    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);\r\n    border-radius: 3px;\r\n    transition: all .2s;\r\n    outline-offset: 2rem;\r\n}\r\n\r\n.gallery-previewer-example:hover {\r\n    z-index: 100;\r\n    outline: 1.5rem solid darkslategrey;\r\n    box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);\r\n    transform: scale(1.05) translateY(-0.5rem);\r\n}\r\n\r\n.gallery-previewer-example:nth-child(1){\r\n    top:0;\r\n    left:0;\r\n\r\n}\r\n\r\n.gallery-previewer-example:nth-child(2){\r\n    \r\n    top: 13rem;\r\n    left: 11rem;\r\n}\r\n\r\n.gallery-previewer-example:nth-child(3){\r\n    \r\n    top: 4rem;\r\n    left: 24rem;\r\n}",""])},function(n,e,r){var t=r(14);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){n.exports='<section class="gallery-previewer">\r\n    <div class="gallery-previewer-container">\r\n        <div class="gallery-previewer-composition">\r\n            <img ng-repeat="image in $ctrl.images track by $index" style=\'background-image:url({{image}})\'  alt="" class="gallery-previewer-example">\r\n            \x3c!-- <img ng-repeat="image in $ctrl.images" ng-src="../../../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n            \x3c!-- <img src="./assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example">\r\n            <img src="../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n        </div>\r\n    </div>\r\n</section>'},function(n,e,r){angular.module("app").component("appGalleryPreviewer",{template:r(16),bindings:{images:"<"},controller:function(){}}),r(15)},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,'.gallery-sidemenu {\r\n    flex-basis: 30%;\r\n    background-color: inherit;\r\n    \r\n}\r\n\r\n.gallery-sidemenu-link-container{\r\n    margin-top: 8rem;\r\n    padding-left: 20rem;\r\n}\r\n\r\n.gallery-sidemenu-link-list{\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.gallery-sidemenu-link-item {\r\n    position: relative;\r\n    padding: .5rem 0 .5rem 1.5rem;\r\n    cursor: pointer;\r\n    /* border: 1px solid lightgrey; */\r\n}\r\n.gallery-sidemenu-link-item:after{\r\n    content: "\\2192";\r\n    position: absolute;\r\n    top: 0;\r\n    font-size: 4rem;\r\n    color: #1E90FF;\r\n    right: 20rem;\r\n    height: 100%;\r\n    opacity:0;\r\n    width: 3px;\r\n    transition: all .4s cubic-bezier(1, 0, 0, 1) 0.2s;\r\n}\r\n\r\n.gallery-sidemenu-link-item:hover:after {\r\n    right: 10%;\r\n    opacity: 1;\r\n}\r\n.gallery-sidemenu-link-item:before {\r\n    /* content: \'\';\r\n    border-bottom: 1px solid green;\r\n    position: absolute;\r\n    top:0;\r\n    left:0;\r\n    height:100%;\r\n    width:3px;\r\n    transform: scaleX(0);\r\n    transform-origin: left;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s, border-bottom .3s; */\r\n    \r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n   \r\n    left: 0;\r\n    height: 100%;\r\n    width: 3px;\r\n    /* clip-path: polygon(0 0, 1 0, 50% 50%, 100% 100%); */\r\n    /* background-color: #1E90FF; */\r\n\r\n    transform: scaleY(0);\r\n    transform-origin: center;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,border .4s, background-color 0.1s;\r\n    \r\n}\r\n.gallery-sidemenu-link-item:hover:before{\r\n    /* transform: scaleX(1);\r\n    width: 100%; */\r\n    border-bottom: 3px solid #1E90FF;\r\n    transform: scaleY(1);\r\n    width: 100%;\r\n}\r\n/* .gallery-sidemenu-link-item:hover {\r\n    border-bottom: 1px solid #1E90FF;\r\n} */\r\n\r\n/* transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,  */\r\n.gallery-sidemenu-link-a {\r\n    position: relative;\r\n    color:#333333;\r\n    text-decoration: none;\r\n    display: block;\r\n    width:100%;\r\n    font-style: italic;\r\n    text-transform: capitalize;\r\n    letter-spacing: .3rem;\r\n    font-size: 3rem;\r\n    font-weight: 100;\r\n}\r\n.gallery-sidemenu-link-list:nth-child(1){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(2){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(3){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(4){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(5){\r\n\r\n}',""])},function(n,e,r){var t=r(18);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){n.exports='<section class="gallery-sidemenu">\r\n    <div class="gallery-sidemenu-link-container">\r\n        <ul class="gallery-sidemenu-link-list">\r\n            <li class="gallery-sidemenu-link-item" ng-repeat="section in $ctrl.sections"  >\r\n                <a ui-sref="section({section: section})" ng-mouseover="$ctrl.getImages({section:section});  $ctrl.startAnimation($event)" class="gallery-sidemenu-link-a">{{section}}</a>\r\n            </li>\r\n          \r\n        </ul>\r\n    </div>\r\n</section>'},function(n,e,r){angular.module("app").component("appGallerySidemenu",{template:r(20),bindings:{sections:"<",getImages:"&"},controller:function(){this.startAnimation=function(n){n.target.value}}}),r(19)},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,".gallery-section {\r\n    background-color: #eeeeee;\r\n    height: 100vh;\r\n}\r\n.gallery-heading {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 25rem;\r\n}\r\n.gallery-heading h2{\r\n    color: #1E90FF;\r\n    font-weight: 400;\r\n    font-size: 6rem;\r\n    padding: 2rem;\r\n}\r\n\r\n.gallery-folder {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    \r\n}\r\n",""])},function(n,e,r){var t=r(22);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){n.exports='<section class="gallery-section">\r\n    <div class="container">\r\n        <div class="gallery-heading">\r\n            <h2>Gallery with different images</h2>\r\n        </div>\r\n        <div class="gallery-folder">\r\n            <app-gallery-sidemenu sections="$ctrl.sections" get-images="$ctrl.onSectionChange(section)" style="flex-basis:30%;"></app-gallery-sidemenu>\r\n            <app-gallery-previewer images="$ctrl.images"  style="flex-basis:70%;"></app-gallery-previewer>\r\n        </div>\r\n        \r\n    </div>\r\n</section>\r\n'},function(n,e,r){angular.module("app").component("appGallery",{template:r(24),controller:["SectionsService","PreviewedImagesService",function(n,e){let r=this;this.$onInit=function(){n.getSections().then(n=>{console.log(n),r.sections=n}),e.getImagesBySection("people").then(n=>{r.images=n})},this.onSectionChange=function(n){console.log(n),e.getImagesBySection(n).then(n=>{r.images=n})}}]}),r(23)},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,".showcase {\r\n    height: 80vh;\r\n    background: url(/assets/img/street.jpg) no-repeat 0 -20vh;\r\n    background-attachment: fixed;\r\n    \r\n}\r\n\r\n.showcase-outer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: inherit;\r\n}\r\n.showcase-info-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.showcase-welcome {\r\n    color: #fafafa;\r\n    font-size: 7rem;\r\n    letter-spacing: .3rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}\r\n\r\n.showcase-creator {\r\n    color: #fafafa;\r\n    font-size: 4rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}",""])},function(n,e,r){var t=r(26);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e){n.exports='<section class="showcase">\r\n    <div class="container">\r\n        <div class="showcase-outer">\r\n            <div class="showcase-info-container">\r\n                <h1 class="showcase-welcome">Welcome to the Gallery</h1>\r\n                <p class="showcase-creator">made by Anatolii Yatsenko</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n<app-gallery></app-gallery>'},function(n,e,r){angular.module("app").component("appShowcase",{template:r(28),controller:function(){}}),r(27)},function(n,e){n.exports='<header class="nav_bav">\r\n  <div class="container">\r\n    <div class="nav_container">\r\n      <div class="responsive_text">\r\n        <h3><span style="color:#1E90FF;">Responsive</span> gallery</h3>\r\n      </div>\r\n      <nav class="navigation_container">\r\n        <ul class="list">\r\n          <li>HOME</li>\r\n          <li>ABOUT US</li>\r\n          <li>SIGN IN</li>\r\n          <li>SIGN UP</li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</header>'},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var r=e.protocol+"//"+e.host,t=r+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:t+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,r){(n.exports=r(1)(!1)).push([n.i,".nav_bav {\r\n    background-color: #35424a;\r\n    border-bottom: #1E90FF 3px solid;\r\n    height: 8rem;\r\n}\r\n\r\n\r\n.nav_container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: inherit;\r\n}\r\n\r\n.responsive_text {\r\n\r\n}\r\n\r\n.responsive_text h3 {\r\n    font-size: 3.2rem;\r\n    color: white;\r\n}\r\n\r\n.list {\r\n    display: flex;\r\n    list-style: none;\r\n}\r\n\r\n.list li {\r\n    color: white;\r\n    font-size: 2rem;\r\n    padding: 1rem 2rem;\r\n} ",""])},function(n,e,r){var t=r(32);"string"==typeof t&&(t=[[n.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(0)(t,o);t.locals&&(n.exports=t.locals)},function(n,e,r){r(33),angular.module("app").component("appNavBar",{template:r(30),controller:function(){}})},function(n,e,r){angular.module("app",["ui.router"]),angular.module("app").config(["$stateProvider","$urlRouterProvider",function(n,e){e.otherwise("/"),n.state({name:"home",url:"/",template:"<app-showcase></app-showcase>"}).state({name:"section",url:"/section/:section",template:'<app-section sections="vm.items"></app-section>',resolve:{data:function(){}},controller:["$stateParams","PreviewedImagesService",function(n,e){this.items="";let r=this;this.$onInit=(()=>{e.getImagesBySection(n.section).then(n=>{console.log(n),r.items=n})})}],controllerAs:"vm"})}]),r(34),r(29),r(25),r(21),r(17),r(13),r(9),r(5),r(4),r(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,