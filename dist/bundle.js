!function(r){var e={};function n(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return r[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=r,n.c=e,n.d=function(r,e,t){n.o(r,e)||Object.defineProperty(r,e,{configurable:!1,enumerable:!0,get:t})},n.r=function(r){Object.defineProperty(r,"__esModule",{value:!0})},n.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return n.d(e,"a",e),e},n.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},n.p="",n(n.s=35)}([function(r,e,n){var t,o,i={},s=(t=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=t.apply(this,arguments)),o}),a=function(r){var e={};return function(r){if("function"==typeof r)return r();if(void 0===e[r]){var n=function(r){return document.querySelector(r)}.call(this,r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}}(),l=null,c=0,p=[],u=n(31);function m(r,e){for(var n=0;n<r.length;n++){var t=r[n],o=i[t.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](t.parts[s]);for(;s<t.parts.length;s++)o.parts.push(b(t.parts[s],e))}else{var a=[];for(s=0;s<t.parts.length;s++)a.push(b(t.parts[s],e));i[t.id]={id:t.id,refs:1,parts:a}}}}function d(r,e){for(var n=[],t={},o=0;o<r.length;o++){var i=r[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};t[s]?t[s].parts.push(a):n.push(t[s]={id:s,parts:[a]})}return n}function g(r,e){var n=a(r.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=p[p.length-1];if("top"===r.insertAt)t?t.nextSibling?n.insertBefore(e,t.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),p.push(e);else if("bottom"===r.insertAt)n.appendChild(e);else{if("object"!=typeof r.insertAt||!r.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(r.insertInto+" "+r.insertAt.before);n.insertBefore(e,o)}}function f(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r);var e=p.indexOf(r);e>=0&&p.splice(e,1)}function h(r){var e=document.createElement("style");return r.attrs.type="text/css",v(e,r.attrs),g(r,e),e}function v(r,e){Object.keys(e).forEach(function(n){r.setAttribute(n,e[n])})}function b(r,e){var n,t,o,i;if(e.transform&&r.css){if(!(i=e.transform(r.css)))return function(){};r.css=i}if(e.singleton){var s=c++;n=l||(l=h(e)),t=w.bind(null,n,s,!1),o=w.bind(null,n,s,!0)}else r.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(r){var e=document.createElement("link");return r.attrs.type="text/css",r.attrs.rel="stylesheet",v(e,r.attrs),g(r,e),e}(e),t=function(r,e,n){var t=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(t=u(t));o&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([t],{type:"text/css"}),a=r.href;r.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),o=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(e),t=function(r,e){var n=e.css,t=e.media;t&&r.setAttribute("media",t);if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){f(n)});return t(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap)return;t(r=e)}else o()}}r.exports=function(r,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(r,e);return m(n,e),function(r){for(var t=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,t.push(a)}r&&m(d(r,e),e);for(o=0;o<t.length;o++){var a;if(0===(a=t[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete i[a.id]}}}};var y,x=(y=[],function(r,e){return y[r]=e,y.filter(Boolean).join("\n")});function w(r,e,n,t){var o=n?"":t.css;if(r.styleSheet)r.styleSheet.cssText=x(e,o);else{var i=document.createTextNode(o),s=r.childNodes;s[e]&&r.removeChild(s[e]),s.length?r.insertBefore(i,s[e]):r.appendChild(i)}}},function(r,e){r.exports=function(r){var e=[];return e.toString=function(){return this.map(function(e){var n=function(r,e){var n=r[1]||"",t=r[3];if(!t)return n;if(e&&"function"==typeof btoa){var o=(s=t,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=t.sources.map(function(r){return"/*# sourceURL="+t.sourceRoot+r+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(e,r);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(r,n){"string"==typeof r&&(r=[[null,r,""]]);for(var t={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(t[i]=!0)}for(o=0;o<r.length;o++){var s=r[o];"number"==typeof s[0]&&t[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,"*, *::before, *::after, body {\r\n    margin: 0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-size: 62.5%;\r\n}\r\n\r\n\r\n.container {\r\n    height: inherit;\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\nbody {\r\n    position: relative;\r\n    background-color: mintcream;\r\n}",""])},function(r,e,n){var t=n(2);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){angular.module("app").service("PreviewedImagesService",["$q",function(r){let e=this;e.database={nature:["https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],people:["https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],women:["https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],rain:["https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],forest:["https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"]},this.getImagesBySection=function(n){return console.log(n),r((r,t)=>{r(e.database[n])})}}])},function(r,e){angular.module("app").service("SectionsService",["$q",function(r){this.getSections=function(){return r((r,e)=>{r(["nature","people","women","rain","forest"])})}}])},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,".section-container {\r\n  margin-bottom: 10rem;\r\n}\r\n\r\n.carousel-section {}\r\n\r\n.carousel-container {}\r\n\r\n.carousel-main-image {\r\n  width: 70%;\r\n  position: relative;\r\n  margin: 12rem auto 0 auto;\r\n}\r\n\r\n.carousel-count {\r\n  font-size: 2rem;\r\n  position: absolute;\r\n  bottom:0;\r\n  right:0;\r\n  color: #fafafa;\r\n  padding: .6rem;\r\n}\r\n\r\n.carousel-preview-image {\r\n  width: 90%;\r\n  border: .3rem solid #ccc;\r\n  height: 68rem;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-color: #333;\r\n  border-top-right-radius: .5rem;\r\n  border-top-left-radius: .5rem;\r\n  margin: auto;\r\n}\r\n\r\n.clipboard-container {\r\n  position: absolute;\r\n  left: 0;\r\n}\r\n\r\n.clipboard-copy-button {\r\n  color:#fafafa;\r\n  font-size: 2rem;\r\n  padding: .6rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.clipboard-copy-button:hover {\r\n  text-decoration: underline;\r\n}\r\n.clipboard-success-message {\r\n  color:#fafafa;\r\n  font-size: 2rem;\r\n  padding: .6rem;\r\n}\r\n\r\n.carousel-actions-container {\r\n  display: flex;\r\n  top: 0;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 100%;\r\n  position: absolute;\r\n}\r\n\r\n.carousel-prev {\r\n  color: #1E90FF;\r\n  font-size: 10rem;\r\n  -webkit-user-select: none; /* Chrome/Safari */        \r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+ */\r\n  transition: all .1s;\r\n}\r\n\r\n.carousel-next {\r\n  color: #1E90FF;\r\n  font-size: 10rem;\r\n  transition: all .1s;\r\n  margin-right: 0.4rem;\r\n  -webkit-user-select: none; /* Chrome/Safari */        \r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+ */\r\n}\r\n\r\n.carousel-prev:hover,\r\n.carousel-next:hover {\r\n  cursor: pointer;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.carousel-caption-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 4rem;\r\n  width: 90%;\r\n  margin: auto;\r\n  background-color: #333;\r\n  border: 2px solid #ccc;\r\n  position: relative;\r\n  border-bottom-left-radius: .5rem;\r\n  border-bottom-right-radius: .5rem;\r\n}\r\n\r\n.carousel-caption-text {\r\n  text-transform: capitalize;\r\n  font-size: 3rem;\r\n  color: #fafafa;\r\n  letter-spacing: 1rem;\r\n}\r\n\r\n.carousel-bottomt-slider {\r\n  display: -webkit-flex;\r\n  overflow-y: hidden;\r\n  overflow-x: auto;\r\n  width: 44%;\r\n  margin: auto;\r\n  display: flex;\r\n}\r\n\r\n.carousel-bottom-item-container:not(:first-child), .carousel-bottom-item-container:not(:nth-child(3n + 1)) {\r\n  flex: 0 0 33.33%;\r\n  margin: 0 0  0 0;\r\n  height: 16rem;\r\n  border: 2px solid #ccc;\r\n  opacity: .5;\r\n}\r\n\r\n.chosen {\r\n  opacity: 1 !important;\r\n}\r\n\r\n\r\n\r\n.carousel-bottom-item-container:nth-child(3n){\r\n  margin: 0 0 0 0;\r\n}\r\n\r\n.carousel-bottom-item-container:nth-child(3n + 1), .carousel-bottom-item-container:first-child {\r\n  flex: 0 0 33.33%;\r\n  margin: 0 0 0 0;\r\n  height: 16rem;\r\n  border: 2px solid #ccc;\r\n  opacity: .5;\r\n}\r\n\r\n.carousel-bottom-item {\r\n  width: 100%;\r\n  height: 16rem;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n}\r\n\r\n.fadeArrow {\r\n  color: grey !important;\r\n}\r\n\r\n.carousel-bottom-item-container:hover {\r\n  cursor: pointer;\r\n  opacity: .9;\r\n  border-color: #1E90FF;\r\n}",""])},function(r,e,n){var t=n(6);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){r.exports='<section class="section-container">\r\n  \x3c!-- Main section --\x3e\r\n  <section class="carousel-section">\r\n    <div class="carousel-container">\r\n      <div class="carousel-main-image">\r\n        \r\n        \x3c!-- Main image --\x3e\r\n        <div class="carousel-preview-image" ng-style="{\'background-image\':\'url(\' + $ctrl.images[$ctrl.imgToPreview] + \')\'}"></div>\r\n\r\n        \x3c!-- Arrows section --\x3e\r\n        <div class="carousel-actions-container">\r\n          <a class="carousel-prev" ng-click="$ctrl.showPrevImage()" ng-class="{\'fadeArrow\' : $ctrl.leftDisabled }">❮</a>\r\n          <a class="carousel-next" ng-click="$ctrl.showNextImage()" ng-class="{\'fadeArrow\' : $ctrl.rightDisabled }">❯</a>\r\n        </div>\r\n        \x3c!-- Caption section  --\x3e\r\n        <div class="carousel-caption-container">\r\n          <p class="carousel-caption-text">{{$ctrl.section}}</p>\r\n          <div class="carousel-count">\r\n            <span>{{$ctrl.imgToPreview + 1}}</span>\r\n            <span>&nbsp;of&nbsp;</span>\r\n            <span>{{$ctrl.images.length}}</span>\r\n          </div>\r\n\r\n          \x3c!-- Clipboard copying section --\x3e\r\n          <div class="clipboard-container">\r\n            <p ng-if="!$ctrl.copiedSuccessfully" ng-click="$ctrl.copyToClipboard()" class="clipboard-copy-button">Copy image link</p>\r\n            <p ng-if="$ctrl.copiedSuccessfully" class="clipboard-success-message">Copying successful!</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    \x3c!-- Bottom slider section --\x3e\r\n    <div class="carousel-bottomt-slider">\r\n      <div ng-repeat="image in $ctrl.images track by $index" class="carousel-bottom-item-container" ng-class="{\'chosen\' : $index == $ctrl.imgToPreview }" ng-click="$ctrl.showChosenItem($index)">\r\n        <div class="carousel-bottom-item"   ng-style="{\'background-image\':\'url({{image}})\'}" ng-click="$ctrl.showImage(image)"></div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</section>'},function(r,e,n){angular.module("app").component("appSection",{template:n(8),bindings:{images:"<",section:"<"},controller:function(){let r=this;r.$onInit=function(){r.leftDisabled=!0,r.rightDisabled=!1,r.imgToPreview=0,r.copiedSuccessfully=!1},r.$onChanges=function(e){e.images&&(r.images=e.images.currentValue)},r.showChosenItem=function(e){r.copiedSuccessfully=!1,r.leftDisabled=0==e,r.rightDisabled=e==r.images.length-1,r.imgToPreview=e},this.showNextImage=(()=>{if(r.copiedSuccessfully=!1,r.leftDisabled=!1,r.rightDisabled=r.imgToPreview+2>=r.images.length,r.imgToPreview==r.images.length-1)return;r.imgToPreview++;let e=document.querySelector(".carousel-bottomt-slider").offsetWidth,n=r.imgToPreview/3;Number.isInteger(n)&&(document.querySelector(".carousel-bottomt-slider").scrollLeft=n*e)}),this.showPrevImage=(()=>{if(r.copiedSuccessfully=!1,r.leftDisabled=r.imgToPreview-2<0,r.rightDisabled=!1,0==r.imgToPreview)return;r.imgToPreview--;let e=document.querySelector(".carousel-bottomt-slider").offsetWidth,n=(r.imgToPreview+1)/3;Number.isInteger(n)?document.querySelector(".carousel-bottomt-slider").scrollLeft=n*e-e:document.querySelector(".carousel-bottomt-slider").scrollLeft=Math.floor(n)*e}),this.copyToClipboard=(()=>{let e=document.createElement("input"),n=document.querySelector("body");e.style.position="absolute",e.style.top="-2000rem",e.style.left="-2000rem",e.value=r.images[r.imgToPreview],n.appendChild(e),e.select(),document.execCommand("copy")?r.copiedSuccessfully=!0:console.log("error while copying to clipbaord"),n.removeChild(e)})}}),n(7)},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,".footer-section {\r\n    background-color: inherit;\r\n   \r\n    \r\n}\r\n\r\n.footer-info-container {\r\n    height: 15rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.footer-info-container > h2 {\r\n    font-size: 3rem;\r\n    color: #1E90FF;\r\n}",""])},function(r,e,n){var t=n(10);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){r.exports='<footer class="footer-section">\r\n    <div class="footer-info-container">\r\n        <h2>All right reserved &copy; Anatolii Yatsenko</h2>\r\n    </div>\r\n</footer>'},function(r,e,n){angular.module("app").component("appFooter",{template:n(12),controller:function(){}}),n(11)},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,".gallery-previewer {\r\n    background-color: white;\r\n}\r\n\r\n\r\n\r\n.gallery-previewer-composition {\r\n    display: block;\r\n    position: relative;\r\n    width:50%;\r\n    margin: auto;\r\n    margin-top: 5rem;\r\n}\r\n\r\n.gallery-previewer-example {\r\n    width: 35rem;\r\n    height: 20rem;\r\n    position: absolute;\r\n    z-index: 1;\r\n    background-size: cover;\r\n    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);\r\n    border-radius: 3px;\r\n    transition: all .2s;\r\n    outline-offset: 2rem;\r\n}\r\n\r\n.gallery-previewer-example:hover {\r\n    z-index: 100;\r\n    outline: 1.5rem solid darkslategrey;\r\n    box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);\r\n    transform: scale(1.05) translateY(-0.5rem);\r\n}\r\n\r\n.gallery-previewer-example:nth-child(1){\r\n    top:0;\r\n    left:0;\r\n\r\n}\r\n\r\n.gallery-previewer-example:nth-child(2){\r\n    \r\n    top: 13rem;\r\n    left: 11rem;\r\n}\r\n\r\n.gallery-previewer-example:nth-child(3){\r\n    \r\n    top: 4rem;\r\n    left: 24rem;\r\n}",""])},function(r,e,n){var t=n(14);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){r.exports='<section class="gallery-previewer">\r\n    <div class="gallery-previewer-container">\r\n        <div class="gallery-previewer-composition">\r\n            <img ng-repeat="image in $ctrl.images track by $index | limitTo: 3" style=\'background-image:url({{image}})\'  alt="" class="gallery-previewer-example">\r\n            \x3c!-- <img ng-repeat="image in $ctrl.images" ng-src="../../../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n            \x3c!-- <img src="./assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example">\r\n            <img src="../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n        </div>\r\n    </div>\r\n</section>'},function(r,e,n){angular.module("app").component("appGalleryPreviewer",{template:n(16),bindings:{images:"<"},controller:function(){}}),n(15)},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,'.gallery-sidemenu {\r\n    flex-basis: 30%;\r\n    background-color: inherit;\r\n    \r\n}\r\n\r\n.gallery-sidemenu-link-container{\r\n    margin-top: 8rem;\r\n    padding-left: 20rem;\r\n}\r\n\r\n.gallery-sidemenu-link-list{\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.gallery-sidemenu-link-item {\r\n    position: relative;\r\n    padding: .5rem 0 .5rem 1.5rem;\r\n    cursor: pointer;\r\n    /* border: 1px solid lightgrey; */\r\n}\r\n.gallery-sidemenu-link-item:after{\r\n    content: "\\2192";\r\n    position: absolute;\r\n    top: 0;\r\n    font-size: 4rem;\r\n    color: #1E90FF;\r\n    right: 20rem;\r\n    height: 100%;\r\n    opacity:0;\r\n    width: 3px;\r\n    transition: all .4s cubic-bezier(1, 0, 0, 1) 0.2s;\r\n}\r\n\r\n.gallery-sidemenu-link-item:hover:after {\r\n    right: 10%;\r\n    opacity: 1;\r\n}\r\n.gallery-sidemenu-link-item:before {\r\n    /* content: \'\';\r\n    border-bottom: 1px solid green;\r\n    position: absolute;\r\n    top:0;\r\n    left:0;\r\n    height:100%;\r\n    width:3px;\r\n    transform: scaleX(0);\r\n    transform-origin: left;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s, border-bottom .3s; */\r\n    \r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n   \r\n    left: 0;\r\n    height: 100%;\r\n    width: 3px;\r\n    /* clip-path: polygon(0 0, 1 0, 50% 50%, 100% 100%); */\r\n    /* background-color: #1E90FF; */\r\n\r\n    transform: scaleY(0);\r\n    transform-origin: center;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,border .4s, background-color 0.1s;\r\n    \r\n}\r\n.gallery-sidemenu-link-item:hover:before{\r\n    /* transform: scaleX(1);\r\n    width: 100%; */\r\n    border-bottom: 3px solid #1E90FF;\r\n    transform: scaleY(1);\r\n    width: 100%;\r\n}\r\n/* .gallery-sidemenu-link-item:hover {\r\n    border-bottom: 1px solid #1E90FF;\r\n} */\r\n\r\n/* transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,  */\r\n.gallery-sidemenu-link-a {\r\n    position: relative;\r\n    color:#333333;\r\n    text-decoration: none;\r\n    display: block;\r\n    width:100%;\r\n    font-style: italic;\r\n    text-transform: capitalize;\r\n    letter-spacing: .3rem;\r\n    font-size: 3rem;\r\n    font-weight: 100;\r\n}\r\n.gallery-sidemenu-link-list:nth-child(1){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(2){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(3){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(4){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(5){\r\n\r\n}',""])},function(r,e,n){var t=n(18);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){r.exports='<section class="gallery-sidemenu">\r\n    <div class="gallery-sidemenu-link-container">\r\n        <ul class="gallery-sidemenu-link-list">\r\n            <li class="gallery-sidemenu-link-item" ng-repeat="section in $ctrl.sections"  >\r\n                <a ui-sref="section({section: section})" ng-mouseover="$ctrl.getImages({section:section});  $ctrl.startAnimation($event)" class="gallery-sidemenu-link-a">{{section}}</a>\r\n            </li>\r\n          \r\n        </ul>\r\n    </div>\r\n</section>'},function(r,e,n){angular.module("app").component("appGallerySidemenu",{template:n(20),bindings:{sections:"<",getImages:"&"},controller:function(){this.startAnimation=function(r){r.target.value}}}),n(19)},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,".gallery-section {\r\n    background-color: inherit;\r\n    height: 100vh;\r\n}\r\n.gallery-heading {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 25rem;\r\n}\r\n.gallery-heading h2{\r\n    color: #1E90FF;\r\n    font-weight: 400;\r\n    text-shadow: 2px 4px 2px #ccc;\r\n    font-size: 6rem;\r\n    padding: 2rem;\r\n}\r\n\r\n.gallery-folder {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    \r\n}\r\n",""])},function(r,e,n){var t=n(22);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){r.exports='<section class="gallery-section">\r\n    <div class="container">\r\n        <div class="gallery-heading">\r\n            <h2>Gallery with different images</h2>\r\n        </div>\r\n        <div class="gallery-folder">\r\n            <app-gallery-sidemenu sections="$ctrl.sections" get-images="$ctrl.onSectionChange(section)" style="flex-basis:30%;"></app-gallery-sidemenu>\r\n            <app-gallery-previewer images="$ctrl.images"  style="flex-basis:70%;"></app-gallery-previewer>\r\n        </div>\r\n        \r\n    </div>\r\n</section>\r\n'},function(r,e,n){angular.module("app").component("appGallery",{template:n(24),controller:["SectionsService","PreviewedImagesService",function(r,e){let n=this;this.$onInit=function(){r.getSections().then(r=>{console.log(r),n.sections=r}),e.getImagesBySection("people").then(r=>{n.images=r})},this.onSectionChange=function(r){console.log(r),e.getImagesBySection(r).then(r=>{n.images=r})}}]}),n(23)},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,".showcase {\r\n    height: 80vh;\r\n    background: url(/assets/img/street.jpg) no-repeat 0 -20vh;\r\n    background-attachment: fixed;\r\n    \r\n}\r\n\r\n.showcase-outer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: inherit;\r\n}\r\n.showcase-info-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.showcase-welcome {\r\n    color: #fafafa;\r\n    font-size: 7rem;\r\n    letter-spacing: .3rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}\r\n\r\n.showcase-creator {\r\n    color: #fafafa;\r\n    font-size: 4rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}",""])},function(r,e,n){var t=n(26);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e){r.exports='<section class="showcase">\r\n    <div class="container">\r\n        <div class="showcase-outer">\r\n            <div class="showcase-info-container">\r\n                <h1 class="showcase-welcome">Welcome to the Gallery</h1>\r\n                <p class="showcase-creator">made by Anatolii Yatsenko</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n<app-gallery></app-gallery>'},function(r,e,n){angular.module("app").component("appShowcase",{template:n(28),controller:function(){}}),n(27)},function(r,e){r.exports='<header class="nav_bav">\r\n  <div class="container">\r\n    <div class="nav_container">\r\n      <div class="responsive_text">\r\n        <h3><span style="color:#1E90FF;">Responsive</span> gallery</h3>\r\n      </div>\r\n      <nav class="navigation_container">\r\n        <ul class="list">\r\n          <li><a ui-sref="home">HOME</a></li>\r\n          <li><a ui-sref="home">ABOUT US</a></li>\r\n          <li><a ui-sref="home">SIGN IN</a></li>\r\n          <li><a ui-sref="home">SIGN UP</a></li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</header>'},function(r,e){r.exports=function(r){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!r||"string"!=typeof r)return r;var n=e.protocol+"//"+e.host,t=n+e.pathname.replace(/\/[^\/]*$/,"/");return r.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(r,e){var o,i=e.trim().replace(/^"(.*)"$/,function(r,e){return e}).replace(/^'(.*)'$/,function(r,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?r:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:t+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(r,e,n){(r.exports=n(1)(!1)).push([r.i,".nav_bav {\r\n    background-color: #35424a;\r\n    border-bottom: #1E90FF 3px solid;\r\n    height: 8rem;\r\n}\r\n\r\n\r\n.nav_container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: inherit;\r\n}\r\n\r\n.responsive_text {\r\n\r\n}\r\n\r\n.responsive_text h3 {\r\n    font-size: 3.2rem;\r\n    color: white;\r\n}\r\n\r\n.list {\r\n    display: flex;\r\n    list-style: none;\r\n}\r\n\r\n.list li {\r\n    color: white;\r\n    font-size: 2rem;\r\n    padding: 1rem 2rem;\r\n} \r\n\r\n.list > li > a:link,\r\n.list > li > a:visited,\r\n.list > li > a:active  {\r\n    color: #fafafa;\r\n    text-decoration: none;\r\n}\r\n\r\n.list > li > a:hover {\r\n    color: #1E90FF;\r\n    \r\n}",""])},function(r,e,n){var t=n(32);"string"==typeof t&&(t=[[r.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(r.exports=t.locals)},function(r,e,n){n(33),angular.module("app").component("appNavBar",{template:n(30),controller:function(){}})},function(r,e,n){angular.module("app",["ui.router"]),angular.module("app").config(["$stateProvider","$urlRouterProvider",function(r,e){e.otherwise("/"),r.state({name:"home",url:"/",template:"<app-showcase></app-showcase>"}).state({name:"section",url:"/section/:section",template:'<app-section images="vm.items" section="vm.section"></app-section>',resolve:{data:function(){}},controller:["$stateParams","PreviewedImagesService",function(r,e){this.items="";let n=this;this.$onInit=(()=>{e.getImagesBySection(r.section).then(r=>{console.log(r),n.items=r}),n.section=r.section})}],controllerAs:"vm"})}]),n(34),n(29),n(25),n(21),n(17),n(13),n(9),n(5),n(4),n(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9tYWluLmNzcyIsIndlYnBhY2s6Ly8vLi9tYWluLmNzcz9mYmE0Iiwid2VicGFjazovLy8uL3NlcnZpY2VzL3ByZXZpZXdlZC1pbWFnZXMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zZXJ2aWNlcy9zZWN0aW9ucy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2VjdGlvbi9zZWN0aW9uLmNzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NlY3Rpb24vc2VjdGlvbi5jc3M/YjdmYyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NlY3Rpb24vc2VjdGlvbi5odG1sIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2VjdGlvbi9zZWN0aW9uLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuY3NzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5jc3M/NDYwYyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuaHRtbCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LXByZXZpZXdlci9nYWxsZXJ5LXByZXZpZXdlci5jc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnktcHJldmlld2VyL2dhbGxlcnktcHJldmlld2VyLmNzcz9lNTNlIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LXByZXZpZXdlci9nYWxsZXJ5LXByZXZpZXdlci5odG1sIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LXByZXZpZXdlci9nYWxsZXJ5LXByZXZpZXdlci5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnktc2lkZW1lbnUvZ2FsbGVyeS1zaWRlbWVudS5jc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnktc2lkZW1lbnUvZ2FsbGVyeS1zaWRlbWVudS5jc3M/MjYzOSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2dhbGxlcnkvZ2FsbGVyeS1zaWRlbWVudS9nYWxsZXJ5LXNpZGVtZW51Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnktc2lkZW1lbnUvZ2FsbGVyeS1zaWRlbWVudS5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnkuY3NzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LmNzcz80ZGRmIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnkuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2hvd2Nhc2Uvc2hvd2Nhc2UuY3NzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2hvd2Nhc2Uvc2hvd2Nhc2UuY3NzPzg5NzUiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zaG93Y2FzZS9zaG93Y2FzZS5odG1sIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2hvd2Nhc2Uvc2hvd2Nhc2UuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXBwLW5hdi1iYXIvYXBwTmF2QmFyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2FwcC1uYXYtYmFyL2FwcE5hdkJhci5jc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHAtbmF2LWJhci9hcHBOYXZCYXIuY3NzPzIwOWMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hcHAtbmF2LWJhci9hcHBOYXZCYXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2FwcC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJ0aGlzIiwiYXJndW1lbnRzIiwiZ2V0RWxlbWVudCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIm9wdGlvbnMiLCJsZW5ndGgiLCJpdGVtIiwiZG9tU3R5bGUiLCJpZCIsInJlZnMiLCJqIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRycyIsInR5cGUiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwidW5kZWZpbmVkIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsInRvU3RyaW5nIiwibWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaG1yIiwibG9jYWxzIiwiYW5ndWxhciIsInNlcnZpY2UiLCIkcSIsImN0cmwiLCJkYXRhYmFzZSIsIm5hdHVyZSIsInBlb3BsZSIsIndvbWVuIiwicmFpbiIsImZvcmVzdCIsImdldEltYWdlc0J5U2VjdGlvbiIsInNlY3Rpb24iLCJjb25zb2xlIiwibG9nIiwicmVzb2x2ZSIsInJlamVjdCIsImdldFNlY3Rpb25zIiwiY29tcG9uZW50IiwidGVtcGxhdGUiLCJiaW5kaW5ncyIsImltYWdlcyIsImNvbnRyb2xsZXIiLCIkb25Jbml0IiwibGVmdERpc2FibGVkIiwicmlnaHREaXNhYmxlZCIsImltZ1RvUHJldmlldyIsImNvcGllZFN1Y2Nlc3NmdWxseSIsIiRvbkNoYW5nZXMiLCJjaGFuZ2VzIiwiY3VycmVudFZhbHVlIiwic2hvd0Nob3Nlbkl0ZW0iLCJzaG93TmV4dEltYWdlIiwic2xpZGVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsImYiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJzY3JvbGxMZWZ0Iiwic2hvd1ByZXZJbWFnZSIsIk1hdGgiLCJmbG9vciIsImNvcHlUb0NsaXBib2FyZCIsIm5ld0VsZW1lbnQiLCJib2R5RWxlbWVudCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwic2VjdGlvbnMiLCJnZXRJbWFnZXMiLCJzdGFydEFuaW1hdGlvbiIsImV2ZW50IiwiU2VjdGlvbnNTZXJ2aWNlIiwiUHJldmlld2VkSW1hZ2VzU2VydmljZSIsInRoZW4iLCJkYXRhIiwib25TZWN0aW9uQ2hhbmdlIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJ0ZXN0IiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsIiRzdGF0ZVBhcmFtcyIsIml0ZW1zIiwiY29udHJvbGxlckFzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFaLEVBQUFtQixFQUFBLFNBQUFqQixHQUNBWSxPQUFBQyxlQUFBYixFQUFBLGNBQWlEa0IsT0FBQSxLQUlqRHBCLEVBQUFxQixFQUFBLFNBQUFsQixHQUNBLElBQUFTLEVBQUFULEtBQUFtQixXQUNBLFdBQTJCLE9BQUFuQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBVSxFQUFBQyxHQUFzRCxPQUFBVixPQUFBVyxVQUFBQyxlQUFBbkIsS0FBQWdCLEVBQUFDLElBR3REeEIsRUFBQTJCLEVBQUEsR0FJQTNCLElBQUE0QixFQUFBLHNCQzlEQSxJQUVBQyxFQUNBQyxFQUhBQyxLQVdB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QUFrTyxRQUFBLCtDQUFBQyxFQUFBQyxHQUVBQSxFQUFBQyxVQUFBLEtBRUFGLEVBQ0FHLE9BQ0E5TixLQUFBLE9BQ0ErTixJQUFBLElBQ0EzRCxTQUFBLGtDQUVBMEQsT0FDQTlOLEtBQUEsVUFDQStOLElBQUEsb0JBQ0EzRCxTQUFBLHFFQUNBSixTQUNBMEMsS0FBQSxjQUlBbkMsWUFBQSxpREFBQXlELEVBQUF4QixHQUNBN0ssS0FBQXNNLE1BQUEsR0FDQSxJQUFBNUUsRUFBQTFILEtBQ0FBLEtBQUE2SSxRQUFBLE1BQ0FnQyxFQUFBNUMsbUJBQUFvRSxFQUFBbkUsU0FBQTRDLEtBQUFDLElBQ0E1QyxRQUFBQyxJQUFBMkMsR0FFQXJELEVBQUE0RSxNQUFBdkIsSUFHQXJELEVBQUFRLFFBQUFtRSxFQUFBbkUsWUFLQXFFLGFBQUEsVUFPQTdPLEVBQUEsSUFDQUEsRUFBQSxJQUNBQSxFQUFBLElBQ0FBLEVBQUEsSUFDQUEsRUFBQSxJQUNBQSxFQUFBLElBQ0FBLEVBQUEsR0FFQUEsRUFBQSxHQUNBQSxFQUFBLEdBRUFBLEVBQUEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNSk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiKiwgKjo6YmVmb3JlLCAqOjphZnRlciwgYm9keSB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzowO1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbn1cXHJcXG5cXHJcXG5odG1sIHtcXHJcXG4gICAgZm9udC1zaXplOiA2Mi41JTtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLmNvbnRhaW5lciB7XFxyXFxuICAgIGhlaWdodDogaW5oZXJpdDtcXHJcXG4gICAgd2lkdGg6IDgwJTtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtaW50Y3JlYW07XFxyXFxufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL21haW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL21haW4uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuc2VydmljZSgnUHJldmlld2VkSW1hZ2VzU2VydmljZScsWyckcScsIGZ1bmN0aW9uKCRxKXtcclxuICAgICAgICBsZXQgY3RybCA9IHRoaXM7XHJcbiAgICAgICAgY3RybC5kYXRhYmFzZSA9IHtcclxuICAgICAgICAgICAgJ25hdHVyZSc6IFtcclxuICAgICAgICAgICAgICAgJ2h0dHBzOi8vaW1hZ2VzLnBleGVscy5jb20vcGhvdG9zLzE4ODAyOS9wZXhlbHMtcGhvdG8tMTg4MDI5LmpwZWc/YXV0bz1jb21wcmVzcyZjcz10aW55c3JnYiZkcHI9MiZoPTc1MCZ3PTEyNjAnLFxyXG4gICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvNTc0MTc3L3BleGVscy1waG90by01NzQxNzcuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTg4MDI5L3BleGVscy1waG90by0xODgwMjkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvNTc0MTc3L3BleGVscy1waG90by01NzQxNzcuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTg4MDI5L3BleGVscy1waG90by0xODgwMjkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTg4MDI5L3BleGVscy1waG90by0xODgwMjkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTg4MDI5L3BleGVscy1waG90by0xODgwMjkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTg4MDI5L3BleGVscy1waG90by0xODgwMjkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTg4MDI5L3BleGVscy1waG90by0xODgwMjkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCdcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAncGVvcGxlJzpbXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvNTc0MTc3L3BleGVscy1waG90by01NzQxNzcuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvNTc0MTc3L3BleGVscy1waG90by01NzQxNzcuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvNTc0MTc3L3BleGVscy1waG90by01NzQxNzcuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCdcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgJ3dvbWVuJzpbXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMzI0NjU4L3BleGVscy1waG90by0zMjQ2NTguanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMzI0NjU4L3BleGVscy1waG90by0zMjQ2NTguanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMzI0NjU4L3BleGVscy1waG90by0zMjQ2NTguanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCdcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgJ3JhaW4nOltcclxuICAgICAgICAgICAgICAgICdodHRwczovL2ltYWdlcy5wZXhlbHMuY29tL3Bob3Rvcy8zOTgxMS9wZXhlbHMtcGhvdG8tMzk4MTEuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMzk4MTEvcGV4ZWxzLXBob3RvLTM5ODExLmpwZWc/YXV0bz1jb21wcmVzcyZjcz10aW55c3JnYiZkcHI9MiZoPTc1MCZ3PTEyNjAnLFxyXG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vaW1hZ2VzLnBleGVscy5jb20vcGhvdG9zLzM5ODExL3BleGVscy1waG90by0zOTgxMS5qcGVnP2F1dG89Y29tcHJlc3MmY3M9dGlueXNyZ2ImZHByPTImaD03NTAmdz0xMjYwJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAnZm9yZXN0JzpbXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvODE0NDk5L3BleGVscy1waG90by04MTQ0OTkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvODE0NDk5L3BleGVscy1waG90by04MTQ0OTkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCcsXHJcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvODE0NDk5L3BleGVscy1waG90by04MTQ0OTkuanBlZz9hdXRvPWNvbXByZXNzJmNzPXRpbnlzcmdiJmRwcj0yJmg9NzUwJnc9MTI2MCdcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRJbWFnZXNCeVNlY3Rpb24gPSBmdW5jdGlvbihzZWN0aW9uKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coc2VjdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiAkcSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGN0cmwuZGF0YWJhc2Vbc2VjdGlvbl0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLnNlcnZpY2UoJ1NlY3Rpb25zU2VydmljZScsWyckcScsIGZ1bmN0aW9uKCRxKXtcclxuICAgICAgICB0aGlzLmdldFNlY3Rpb25zID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuICRxKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoW1xyXG4gICAgICAgICAgICAgICAgICAgICduYXR1cmUnLCBcclxuICAgICAgICAgICAgICAgICAgICAncGVvcGxlJyxcclxuICAgICAgICAgICAgICAgICAgICAnd29tZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICdyYWluJyxcclxuICAgICAgICAgICAgICAgICAgICAnZm9yZXN0J1xyXG4gICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XSk7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2VjdGlvbi1jb250YWluZXIge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMTByZW07XFxyXFxufVxcclxcblxcclxcbi5jYXJvdXNlbC1zZWN0aW9uIHt9XFxyXFxuXFxyXFxuLmNhcm91c2VsLWNvbnRhaW5lciB7fVxcclxcblxcclxcbi5jYXJvdXNlbC1tYWluLWltYWdlIHtcXHJcXG4gIHdpZHRoOiA3MCU7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBtYXJnaW46IDEycmVtIGF1dG8gMCBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uY2Fyb3VzZWwtY291bnQge1xcclxcbiAgZm9udC1zaXplOiAycmVtO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgYm90dG9tOjA7XFxyXFxuICByaWdodDowO1xcclxcbiAgY29sb3I6ICNmYWZhZmE7XFxyXFxuICBwYWRkaW5nOiAuNnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcm91c2VsLXByZXZpZXctaW1hZ2Uge1xcclxcbiAgd2lkdGg6IDkwJTtcXHJcXG4gIGJvcmRlcjogLjNyZW0gc29saWQgI2NjYztcXHJcXG4gIGhlaWdodDogNjhyZW07XFxyXFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxyXFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogLjVyZW07XFxyXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAuNXJlbTtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmNsaXBib2FyZC1jb250YWluZXIge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgbGVmdDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLmNsaXBib2FyZC1jb3B5LWJ1dHRvbiB7XFxyXFxuICBjb2xvcjojZmFmYWZhO1xcclxcbiAgZm9udC1zaXplOiAycmVtO1xcclxcbiAgcGFkZGluZzogLjZyZW07XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jbGlwYm9hcmQtY29weS1idXR0b246aG92ZXIge1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxyXFxufVxcclxcbi5jbGlwYm9hcmQtc3VjY2Vzcy1tZXNzYWdlIHtcXHJcXG4gIGNvbG9yOiNmYWZhZmE7XFxyXFxuICBmb250LXNpemU6IDJyZW07XFxyXFxuICBwYWRkaW5nOiAuNnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcm91c2VsLWFjdGlvbnMtY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICB0b3A6IDA7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxufVxcclxcblxcclxcbi5jYXJvdXNlbC1wcmV2IHtcXHJcXG4gIGNvbG9yOiAjMUU5MEZGO1xcclxcbiAgZm9udC1zaXplOiAxMHJlbTtcXHJcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIENocm9tZS9TYWZhcmkgKi8gICAgICAgIFxcclxcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLyogRmlyZWZveCAqL1xcclxcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJRTEwKyAqL1xcclxcbiAgdHJhbnNpdGlvbjogYWxsIC4xcztcXHJcXG59XFxyXFxuXFxyXFxuLmNhcm91c2VsLW5leHQge1xcclxcbiAgY29sb3I6ICMxRTkwRkY7XFxyXFxuICBmb250LXNpemU6IDEwcmVtO1xcclxcbiAgdHJhbnNpdGlvbjogYWxsIC4xcztcXHJcXG4gIG1hcmdpbi1yaWdodDogMC40cmVtO1xcclxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyogQ2hyb21lL1NhZmFyaSAqLyAgICAgICAgXFxyXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lOyAvKiBGaXJlZm94ICovXFxyXFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIElFMTArICovXFxyXFxufVxcclxcblxcclxcbi5jYXJvdXNlbC1wcmV2OmhvdmVyLFxcclxcbi5jYXJvdXNlbC1uZXh0OmhvdmVyIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcm91c2VsLWNhcHRpb24tY29udGFpbmVyIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBoZWlnaHQ6IDRyZW07XFxyXFxuICB3aWR0aDogOTAlO1xcclxcbiAgbWFyZ2luOiBhdXRvO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcXHJcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNjY2M7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAuNXJlbTtcXHJcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAuNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcm91c2VsLWNhcHRpb24tdGV4dCB7XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXHJcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXHJcXG4gIGNvbG9yOiAjZmFmYWZhO1xcclxcbiAgbGV0dGVyLXNwYWNpbmc6IDFyZW07XFxyXFxufVxcclxcblxcclxcbi5jYXJvdXNlbC1ib3R0b210LXNsaWRlciB7XFxyXFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxyXFxuICBvdmVyZmxvdy15OiBoaWRkZW47XFxyXFxuICBvdmVyZmxvdy14OiBhdXRvO1xcclxcbiAgd2lkdGg6IDQ0JTtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxufVxcclxcblxcclxcbi5jYXJvdXNlbC1ib3R0b20taXRlbS1jb250YWluZXI6bm90KDpmaXJzdC1jaGlsZCksIC5jYXJvdXNlbC1ib3R0b20taXRlbS1jb250YWluZXI6bm90KDpudGgtY2hpbGQoM24gKyAxKSkge1xcclxcbiAgZmxleDogMCAwIDMzLjMzJTtcXHJcXG4gIG1hcmdpbjogMCAwICAwIDA7XFxyXFxuICBoZWlnaHQ6IDE2cmVtO1xcclxcbiAgYm9yZGVyOiAycHggc29saWQgI2NjYztcXHJcXG4gIG9wYWNpdHk6IC41O1xcclxcbn1cXHJcXG5cXHJcXG4uY2hvc2VuIHtcXHJcXG4gIG9wYWNpdHk6IDEgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLmNhcm91c2VsLWJvdHRvbS1pdGVtLWNvbnRhaW5lcjpudGgtY2hpbGQoM24pe1xcclxcbiAgbWFyZ2luOiAwIDAgMCAwO1xcclxcbn1cXHJcXG5cXHJcXG4uY2Fyb3VzZWwtYm90dG9tLWl0ZW0tY29udGFpbmVyOm50aC1jaGlsZCgzbiArIDEpLCAuY2Fyb3VzZWwtYm90dG9tLWl0ZW0tY29udGFpbmVyOmZpcnN0LWNoaWxkIHtcXHJcXG4gIGZsZXg6IDAgMCAzMy4zMyU7XFxyXFxuICBtYXJnaW46IDAgMCAwIDA7XFxyXFxuICBoZWlnaHQ6IDE2cmVtO1xcclxcbiAgYm9yZGVyOiAycHggc29saWQgI2NjYztcXHJcXG4gIG9wYWNpdHk6IC41O1xcclxcbn1cXHJcXG5cXHJcXG4uY2Fyb3VzZWwtYm90dG9tLWl0ZW0ge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDE2cmVtO1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxyXFxufVxcclxcblxcclxcbi5mYWRlQXJyb3cge1xcclxcbiAgY29sb3I6IGdyZXkgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmNhcm91c2VsLWJvdHRvbS1pdGVtLWNvbnRhaW5lcjpob3ZlciB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBvcGFjaXR5OiAuOTtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzFFOTBGRjtcXHJcXG59XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc2VjdGlvbi5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc2VjdGlvbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3NlY3Rpb24uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGNsYXNzPVxcXCJzZWN0aW9uLWNvbnRhaW5lclxcXCI+XFxyXFxuICA8IS0tIE1haW4gc2VjdGlvbiAtLT5cXHJcXG4gIDxzZWN0aW9uIGNsYXNzPVxcXCJjYXJvdXNlbC1zZWN0aW9uXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1tYWluLWltYWdlXFxcIj5cXHJcXG4gICAgICAgIFxcclxcbiAgICAgICAgPCEtLSBNYWluIGltYWdlIC0tPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtcHJldmlldy1pbWFnZVxcXCIgbmctc3R5bGU9XFxcInsnYmFja2dyb3VuZC1pbWFnZSc6J3VybCgnICsgJGN0cmwuaW1hZ2VzWyRjdHJsLmltZ1RvUHJldmlld10gKyAnKSd9XFxcIj48L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgIDwhLS0gQXJyb3dzIHNlY3Rpb24gLS0+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1hY3Rpb25zLWNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICAgIDxhIGNsYXNzPVxcXCJjYXJvdXNlbC1wcmV2XFxcIiBuZy1jbGljaz1cXFwiJGN0cmwuc2hvd1ByZXZJbWFnZSgpXFxcIiBuZy1jbGFzcz1cXFwieydmYWRlQXJyb3cnIDogJGN0cmwubGVmdERpc2FibGVkIH1cXFwiPuKdrjwvYT5cXHJcXG4gICAgICAgICAgPGEgY2xhc3M9XFxcImNhcm91c2VsLW5leHRcXFwiIG5nLWNsaWNrPVxcXCIkY3RybC5zaG93TmV4dEltYWdlKClcXFwiIG5nLWNsYXNzPVxcXCJ7J2ZhZGVBcnJvdycgOiAkY3RybC5yaWdodERpc2FibGVkIH1cXFwiPuKdrzwvYT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPCEtLSBDYXB0aW9uIHNlY3Rpb24gIC0tPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtY2FwdGlvbi1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgICA8cCBjbGFzcz1cXFwiY2Fyb3VzZWwtY2FwdGlvbi10ZXh0XFxcIj57eyRjdHJsLnNlY3Rpb259fTwvcD5cXHJcXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtY291bnRcXFwiPlxcclxcbiAgICAgICAgICAgIDxzcGFuPnt7JGN0cmwuaW1nVG9QcmV2aWV3ICsgMX19PC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuPiZuYnNwO29mJm5ic3A7PC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuPnt7JGN0cmwuaW1hZ2VzLmxlbmd0aH19PC9zcGFuPlxcclxcbiAgICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgPCEtLSBDbGlwYm9hcmQgY29weWluZyBzZWN0aW9uIC0tPlxcclxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGlwYm9hcmQtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8cCBuZy1pZj1cXFwiISRjdHJsLmNvcGllZFN1Y2Nlc3NmdWxseVxcXCIgbmctY2xpY2s9XFxcIiRjdHJsLmNvcHlUb0NsaXBib2FyZCgpXFxcIiBjbGFzcz1cXFwiY2xpcGJvYXJkLWNvcHktYnV0dG9uXFxcIj5Db3B5IGltYWdlIGxpbms8L3A+XFxyXFxuICAgICAgICAgICAgPHAgbmctaWY9XFxcIiRjdHJsLmNvcGllZFN1Y2Nlc3NmdWxseVxcXCIgY2xhc3M9XFxcImNsaXBib2FyZC1zdWNjZXNzLW1lc3NhZ2VcXFwiPkNvcHlpbmcgc3VjY2Vzc2Z1bCE8L3A+XFxyXFxuICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8IS0tIEJvdHRvbSBzbGlkZXIgc2VjdGlvbiAtLT5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtYm90dG9tdC1zbGlkZXJcXFwiPlxcclxcbiAgICAgIDxkaXYgbmctcmVwZWF0PVxcXCJpbWFnZSBpbiAkY3RybC5pbWFnZXMgdHJhY2sgYnkgJGluZGV4XFxcIiBjbGFzcz1cXFwiY2Fyb3VzZWwtYm90dG9tLWl0ZW0tY29udGFpbmVyXFxcIiBuZy1jbGFzcz1cXFwieydjaG9zZW4nIDogJGluZGV4ID09ICRjdHJsLmltZ1RvUHJldmlldyB9XFxcIiBuZy1jbGljaz1cXFwiJGN0cmwuc2hvd0Nob3Nlbkl0ZW0oJGluZGV4KVxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1ib3R0b20taXRlbVxcXCIgICBuZy1zdHlsZT1cXFwieydiYWNrZ3JvdW5kLWltYWdlJzondXJsKHt7aW1hZ2V9fSknfVxcXCIgbmctY2xpY2s9XFxcIiRjdHJsLnNob3dJbWFnZShpbWFnZSlcXFwiPjwvZGl2PlxcclxcbiAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvc2VjdGlvbj5cXHJcXG48L3NlY3Rpb24+XCI7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29tcG9uZW50KCdhcHBTZWN0aW9uJywge1xyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3NlY3Rpb24uaHRtbCcpLFxyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGltYWdlczogJzwnLFxyXG4gICAgICAgICAgICBzZWN0aW9uOiAnPCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBjdHJsID0gdGhpcztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGN0cmwubGVmdERpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGN0cmwucmlnaHREaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY3RybC5pbWdUb1ByZXZpZXcgPSAwO1xyXG4gICAgICAgICAgICAgICAgY3RybC5jb3BpZWRTdWNjZXNzZnVsbHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3RybC4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VzLmltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwuaW1hZ2VzID0gY2hhbmdlcy5pbWFnZXMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL1Nob3dpbmcgY2hvc2VuIGl0ZW0gXHJcbiAgICAgICAgICAgIGN0cmwuc2hvd0Nob3Nlbkl0ZW0gPSBmdW5jdGlvbihpbmRleCl7XHJcbiAgICAgICAgICAgICAgICBjdHJsLmNvcGllZFN1Y2Nlc3NmdWxseSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy9DaGVja2luZyB3aGV0aGVyIGl0ZW0gd2UgY2hvb3NlIGlzIGVpdGhlIGxhc3Qgb3IgZmlyc3QgXHJcbiAgICAgICAgICAgICAgICBjdHJsLmxlZnREaXNhYmxlZCA9IGluZGV4ID09IDA7XHJcbiAgICAgICAgICAgICAgICBjdHJsLnJpZ2h0RGlzYWJsZWQgPSBpbmRleCA9PSBjdHJsLmltYWdlcy5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGN0cmwuaW1nVG9QcmV2aWV3ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd05leHRJbWFnZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGN0cmwuY29waWVkU3VjY2Vzc2Z1bGx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvL0Fycm93cyBhY2Nlc3NpYmlsaXR5IHNlY3Rpb25cclxuICAgICAgICAgICAgICAgIGN0cmwubGVmdERpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjdHJsLnJpZ2h0RGlzYWJsZWQgPSBjdHJsLmltZ1RvUHJldmlldyArIDIgPj0gY3RybC5pbWFnZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0cmwuaW1nVG9QcmV2aWV3ID09IGN0cmwuaW1hZ2VzLmxlbmd0aCAtIDEgKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9TaG93aW5nIG5leHQgaW1hZ2VcclxuICAgICAgICAgICAgICAgIGN0cmwuaW1nVG9QcmV2aWV3Kys7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9Nb3Zpbmcgc2xpZGVyIGluIHRoZSBib3R0b20gc2xpZGVyIHNlY3Rpb25cclxuICAgICAgICAgICAgICAgIGxldCBzbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2Fyb3VzZWwtYm90dG9tdC1zbGlkZXInKTtcclxuICAgICAgICAgICAgICAgIGxldCBzbGlkZXJXaWR0aCA9IHNsaWRlci5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgIGxldCBmID0gY3RybC5pbWdUb1ByZXZpZXcgLyAzO1xyXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZikpIFxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1ib3R0b210LXNsaWRlcicpLnNjcm9sbExlZnQgPSBmICogc2xpZGVyV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd1ByZXZJbWFnZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGN0cmwuY29waWVkU3VjY2Vzc2Z1bGx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvL0Fycm93cyBhY2Nlc3NpYmlsaXR5IHNlY3Rpb25cclxuICAgICAgICAgICAgICAgIGN0cmwubGVmdERpc2FibGVkID0gY3RybC5pbWdUb1ByZXZpZXcgLSAyIDwgMDtcclxuICAgICAgICAgICAgICAgIGN0cmwucmlnaHREaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYoY3RybC5pbWdUb1ByZXZpZXcgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vU2hvd2luZyBwcmV2aW91cyBpbWFnZVxyXG4gICAgICAgICAgICAgICAgY3RybC5pbWdUb1ByZXZpZXctLTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL01vdmluZyBzbGlkZXIgaW4gdGhlIGJvdHRvbSBzbGlkZXIgc2VjdGlvblxyXG4gICAgICAgICAgICAgICAgbGV0IHNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1ib3R0b210LXNsaWRlcicpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNsaWRlcldpZHRoID0gc2xpZGVyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgbGV0IGYgPSAoY3RybC5pbWdUb1ByZXZpZXcgKyAxKSAvIDM7XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihmKSkgXHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcm91c2VsLWJvdHRvbXQtc2xpZGVyJykuc2Nyb2xsTGVmdCA9IGYgKiBzbGlkZXJXaWR0aCAtIHNsaWRlcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2Fyb3VzZWwtYm90dG9tdC1zbGlkZXInKS5zY3JvbGxMZWZ0ID0gTWF0aC5mbG9vcihmKSAqIHNsaWRlcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb3B5VG9DbGlwYm9hcmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vQ3JlYXRpbmcgaW5wdXQgb3V0IG9mIHVzZXIncyB2aWV3XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9UbyBwcmV2ZW50IHVzZXIgZnJvbSBzZWVpbmcgY3JlYXRlZCBpbnB1dFxyXG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnN0eWxlLnRvcCA9ICctMjAwMHJlbSc7XHJcbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnN0eWxlLmxlZnQgPSAnLTIwMDByZW0nO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vUGFzc2luZyBpbWFnZSBsaW5rIGludG8gaW5wdXQgZmllbGRcclxuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQudmFsdWUgPSBjdHJsLmltYWdlc1tjdHJsLmltZ1RvUHJldmlld107XHJcblxyXG4gICAgICAgICAgICAgICAgLy9BcHBlbmRpbmcgZWxlbWVudCB0byBib2R5IGFuZCBhZGRpbmcgbGluayB0byB0aGUgY2xpcGJvYXJkXHJcbiAgICAgICAgICAgICAgICBib2R5RWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2VsZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2xpcGJvYXJkQ29weSA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNsaXBib2FyZENvcHkpIFxyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwuY29waWVkU3VjY2Vzc2Z1bGx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHdoaWxlIGNvcHlpbmcgdG8gY2xpcGJhb3JkJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vUmVtb3ZpbmcgY3JlYXRlZCBlbGVtZW50IGZyb20gdGhlIGJvZHlcclxuICAgICAgICAgICAgICAgIGJvZHlFbGVtZW50LnJlbW92ZUNoaWxkKG5ld0VsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5yZXF1aXJlKCcuL3NlY3Rpb24uY3NzJyk7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZm9vdGVyLXNlY3Rpb24ge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcclxcbiAgIFxcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3Rlci1pbmZvLWNvbnRhaW5lciB7XFxyXFxuICAgIGhlaWdodDogMTVyZW07XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9vdGVyLWluZm8tY29udGFpbmVyID4gaDIge1xcclxcbiAgICBmb250LXNpemU6IDNyZW07XFxyXFxuICAgIGNvbG9yOiAjMUU5MEZGO1xcclxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9mb290ZXIuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3Rlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3Rlci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGZvb3RlciBjbGFzcz1cXFwiZm9vdGVyLXNlY3Rpb25cXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb290ZXItaW5mby1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgPGgyPkFsbCByaWdodCByZXNlcnZlZCAmY29weTsgQW5hdG9saWkgWWF0c2Vua288L2gyPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Zvb3Rlcj5cIjsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb21wb25lbnQoJ2FwcEZvb3RlcicsIHtcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9mb290ZXIuaHRtbCcpLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbnJlcXVpcmUoJy4vZm9vdGVyLmNzcycpOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmdhbGxlcnktcHJldmlld2VyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcblxcclxcblxcclxcbi5nYWxsZXJ5LXByZXZpZXdlci1jb21wb3NpdGlvbiB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHdpZHRoOjUwJTtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBtYXJnaW4tdG9wOiA1cmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1wcmV2aWV3ZXItZXhhbXBsZSB7XFxyXFxuICAgIHdpZHRoOiAzNXJlbTtcXHJcXG4gICAgaGVpZ2h0OiAyMHJlbTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB6LWluZGV4OiAxO1xcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDEuNXJlbSA0cmVtIHJnYmEoMCwgMCwgMCwgMC40KTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbiAgICB0cmFuc2l0aW9uOiBhbGwgLjJzO1xcclxcbiAgICBvdXRsaW5lLW9mZnNldDogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmdhbGxlcnktcHJldmlld2VyLWV4YW1wbGU6aG92ZXIge1xcclxcbiAgICB6LWluZGV4OiAxMDA7XFxyXFxuICAgIG91dGxpbmU6IDEuNXJlbSBzb2xpZCBkYXJrc2xhdGVncmV5O1xcclxcbiAgICBib3gtc2hhZG93OiAwIDIuNXJlbSA0cmVtIHJnYmEoMCwgMCwgMCwgMC41KTtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjA1KSB0cmFuc2xhdGVZKC0wLjVyZW0pO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1wcmV2aWV3ZXItZXhhbXBsZTpudGgtY2hpbGQoMSl7XFxyXFxuICAgIHRvcDowO1xcclxcbiAgICBsZWZ0OjA7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5nYWxsZXJ5LXByZXZpZXdlci1leGFtcGxlOm50aC1jaGlsZCgyKXtcXHJcXG4gICAgXFxyXFxuICAgIHRvcDogMTNyZW07XFxyXFxuICAgIGxlZnQ6IDExcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1wcmV2aWV3ZXItZXhhbXBsZTpudGgtY2hpbGQoMyl7XFxyXFxuICAgIFxcclxcbiAgICB0b3A6IDRyZW07XFxyXFxuICAgIGxlZnQ6IDI0cmVtO1xcclxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9nYWxsZXJ5LXByZXZpZXdlci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZ2FsbGVyeS1wcmV2aWV3ZXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9nYWxsZXJ5LXByZXZpZXdlci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHNlY3Rpb24gY2xhc3M9XFxcImdhbGxlcnktcHJldmlld2VyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZ2FsbGVyeS1wcmV2aWV3ZXItY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImdhbGxlcnktcHJldmlld2VyLWNvbXBvc2l0aW9uXFxcIj5cXHJcXG4gICAgICAgICAgICA8aW1nIG5nLXJlcGVhdD1cXFwiaW1hZ2UgaW4gJGN0cmwuaW1hZ2VzIHRyYWNrIGJ5ICRpbmRleCB8IGxpbWl0VG86IDNcXFwiIHN0eWxlPSdiYWNrZ3JvdW5kLWltYWdlOnVybCh7e2ltYWdlfX0pJyAgYWx0PVxcXCJcXFwiIGNsYXNzPVxcXCJnYWxsZXJ5LXByZXZpZXdlci1leGFtcGxlXFxcIj5cXHJcXG4gICAgICAgICAgICA8IS0tIDxpbWcgbmctcmVwZWF0PVxcXCJpbWFnZSBpbiAkY3RybC5pbWFnZXNcXFwiIG5nLXNyYz1cXFwiLi4vLi4vLi4vYXNzZXRzL2ltZy80ay1uYXR1cmUtd2FsbHBhcGVyLTAwNDkuanBnXFxcIiBhbHQ9XFxcIlxcXCIgY2xhc3M9XFxcImdhbGxlcnktcHJldmlld2VyLWV4YW1wbGVcXFwiPiAtLT5cXHJcXG4gICAgICAgICAgICA8IS0tIDxpbWcgc3JjPVxcXCIuL2Fzc2V0cy9pbWcvNGstbmF0dXJlLXdhbGxwYXBlci0wMDQ5LmpwZ1xcXCIgYWx0PVxcXCJcXFwiIGNsYXNzPVxcXCJnYWxsZXJ5LXByZXZpZXdlci1leGFtcGxlXFxcIj5cXHJcXG4gICAgICAgICAgICA8aW1nIHNyYz1cXFwiLi4vYXNzZXRzL2ltZy80ay1uYXR1cmUtd2FsbHBhcGVyLTAwNDkuanBnXFxcIiBhbHQ9XFxcIlxcXCIgY2xhc3M9XFxcImdhbGxlcnktcHJldmlld2VyLWV4YW1wbGVcXFwiPiAtLT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L3NlY3Rpb24+XCI7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29tcG9uZW50KCdhcHBHYWxsZXJ5UHJldmlld2VyJywge1xyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2dhbGxlcnktcHJldmlld2VyLmh0bWwnKSxcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGltYWdlczonPCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG5yZXF1aXJlKCcuL2dhbGxlcnktcHJldmlld2VyLmNzcycpOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmdhbGxlcnktc2lkZW1lbnUge1xcclxcbiAgICBmbGV4LWJhc2lzOiAzMCU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxyXFxuICAgIFxcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWNvbnRhaW5lcntcXHJcXG4gICAgbWFyZ2luLXRvcDogOHJlbTtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiAyMHJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmdhbGxlcnktc2lkZW1lbnUtbGluay1saXN0e1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWl0ZW0ge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHBhZGRpbmc6IC41cmVtIDAgLjVyZW0gMS41cmVtO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIC8qIGJvcmRlcjogMXB4IHNvbGlkIGxpZ2h0Z3JleTsgKi9cXHJcXG59XFxyXFxuLmdhbGxlcnktc2lkZW1lbnUtbGluay1pdGVtOmFmdGVye1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcXDIxOTJcXFwiO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICAgZm9udC1zaXplOiA0cmVtO1xcclxcbiAgICBjb2xvcjogIzFFOTBGRjtcXHJcXG4gICAgcmlnaHQ6IDIwcmVtO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIG9wYWNpdHk6MDtcXHJcXG4gICAgd2lkdGg6IDNweDtcXHJcXG4gICAgdHJhbnNpdGlvbjogYWxsIC40cyBjdWJpYy1iZXppZXIoMSwgMCwgMCwgMSkgMC4ycztcXHJcXG59XFxyXFxuXFxyXFxuLmdhbGxlcnktc2lkZW1lbnUtbGluay1pdGVtOmhvdmVyOmFmdGVyIHtcXHJcXG4gICAgcmlnaHQ6IDEwJTtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG59XFxyXFxuLmdhbGxlcnktc2lkZW1lbnUtbGluay1pdGVtOmJlZm9yZSB7XFxyXFxuICAgIC8qIGNvbnRlbnQ6ICcnO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgZ3JlZW47XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdG9wOjA7XFxyXFxuICAgIGxlZnQ6MDtcXHJcXG4gICAgaGVpZ2h0OjEwMCU7XFxyXFxuICAgIHdpZHRoOjNweDtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7XFxyXFxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzLCB3aWR0aCAwLjRzIGN1YmljLWJlemllcigxLCAwLCAwLCAxKSAwLjJzLCBib3JkZXItYm90dG9tIC4zczsgKi9cXHJcXG4gICAgXFxyXFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICBcXHJcXG4gICAgbGVmdDogMDtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICB3aWR0aDogM3B4O1xcclxcbiAgICAvKiBjbGlwLXBhdGg6IHBvbHlnb24oMCAwLCAxIDAsIDUwJSA1MCUsIDEwMCUgMTAwJSk7ICovXFxyXFxuICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICMxRTkwRkY7ICovXFxyXFxuXFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGVZKDApO1xcclxcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzLCB3aWR0aCAwLjRzIGN1YmljLWJlemllcigxLCAwLCAwLCAxKSAwLjJzLGJvcmRlciAuNHMsIGJhY2tncm91bmQtY29sb3IgMC4xcztcXHJcXG4gICAgXFxyXFxufVxcclxcbi5nYWxsZXJ5LXNpZGVtZW51LWxpbmstaXRlbTpob3ZlcjpiZWZvcmV7XFxyXFxuICAgIC8qIHRyYW5zZm9ybTogc2NhbGVYKDEpO1xcclxcbiAgICB3aWR0aDogMTAwJTsgKi9cXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMxRTkwRkY7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGVZKDEpO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuLyogLmdhbGxlcnktc2lkZW1lbnUtbGluay1pdGVtOmhvdmVyIHtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMxRTkwRkY7XFxyXFxufSAqL1xcclxcblxcclxcbi8qIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzLCB3aWR0aCAwLjRzIGN1YmljLWJlemllcigxLCAwLCAwLCAxKSAwLjJzLCAgKi9cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWEge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGNvbG9yOiMzMzMzMzM7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHdpZHRoOjEwMCU7XFxyXFxuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxyXFxuICAgIGxldHRlci1zcGFjaW5nOiAuM3JlbTtcXHJcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcclxcbiAgICBmb250LXdlaWdodDogMTAwO1xcclxcbn1cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWxpc3Q6bnRoLWNoaWxkKDEpe1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWxpc3Q6bnRoLWNoaWxkKDIpe1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWxpc3Q6bnRoLWNoaWxkKDMpe1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWxpc3Q6bnRoLWNoaWxkKDQpe1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1zaWRlbWVudS1saW5rLWxpc3Q6bnRoLWNoaWxkKDUpe1xcclxcblxcclxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9nYWxsZXJ5LXNpZGVtZW51LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9nYWxsZXJ5LXNpZGVtZW51LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZ2FsbGVyeS1zaWRlbWVudS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHNlY3Rpb24gY2xhc3M9XFxcImdhbGxlcnktc2lkZW1lbnVcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJnYWxsZXJ5LXNpZGVtZW51LWxpbmstY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgIDx1bCBjbGFzcz1cXFwiZ2FsbGVyeS1zaWRlbWVudS1saW5rLWxpc3RcXFwiPlxcclxcbiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZ2FsbGVyeS1zaWRlbWVudS1saW5rLWl0ZW1cXFwiIG5nLXJlcGVhdD1cXFwic2VjdGlvbiBpbiAkY3RybC5zZWN0aW9uc1xcXCIgID5cXHJcXG4gICAgICAgICAgICAgICAgPGEgdWktc3JlZj1cXFwic2VjdGlvbih7c2VjdGlvbjogc2VjdGlvbn0pXFxcIiBuZy1tb3VzZW92ZXI9XFxcIiRjdHJsLmdldEltYWdlcyh7c2VjdGlvbjpzZWN0aW9ufSk7ICAkY3RybC5zdGFydEFuaW1hdGlvbigkZXZlbnQpXFxcIiBjbGFzcz1cXFwiZ2FsbGVyeS1zaWRlbWVudS1saW5rLWFcXFwiPnt7c2VjdGlvbn19PC9hPlxcclxcbiAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgIFxcclxcbiAgICAgICAgPC91bD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9zZWN0aW9uPlwiOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbXBvbmVudCgnYXBwR2FsbGVyeVNpZGVtZW51Jywge1xyXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2dhbGxlcnktc2lkZW1lbnUuaHRtbCcpLFxyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIHNlY3Rpb25zOiAnPCcsXHJcbiAgICAgICAgICAgIGdldEltYWdlczogJyYnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudC50YXJnZXQuY2hpbGROb2Rlc1sxXSlcclxuICAgICAgICAgICAgICAgbGV0IHRleHQgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldC5jaGlsZE5vZGVzWzFdKTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbnJlcXVpcmUoJy4vZ2FsbGVyeS1zaWRlbWVudS5jc3MnKTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5nYWxsZXJ5LXNlY3Rpb24ge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcclxcbiAgICBoZWlnaHQ6IDEwMHZoO1xcclxcbn1cXHJcXG4uZ2FsbGVyeS1oZWFkaW5nIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGhlaWdodDogMjVyZW07XFxyXFxufVxcclxcbi5nYWxsZXJ5LWhlYWRpbmcgaDJ7XFxyXFxuICAgIGNvbG9yOiAjMUU5MEZGO1xcclxcbiAgICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgICB0ZXh0LXNoYWRvdzogMnB4IDRweCAycHggI2NjYztcXHJcXG4gICAgZm9udC1zaXplOiA2cmVtO1xcclxcbiAgICBwYWRkaW5nOiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FsbGVyeS1mb2xkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIFxcclxcbn1cXHJcXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9nYWxsZXJ5LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9nYWxsZXJ5LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZ2FsbGVyeS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHNlY3Rpb24gY2xhc3M9XFxcImdhbGxlcnktc2VjdGlvblxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJnYWxsZXJ5LWhlYWRpbmdcXFwiPlxcclxcbiAgICAgICAgICAgIDxoMj5HYWxsZXJ5IHdpdGggZGlmZmVyZW50IGltYWdlczwvaDI+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImdhbGxlcnktZm9sZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8YXBwLWdhbGxlcnktc2lkZW1lbnUgc2VjdGlvbnM9XFxcIiRjdHJsLnNlY3Rpb25zXFxcIiBnZXQtaW1hZ2VzPVxcXCIkY3RybC5vblNlY3Rpb25DaGFuZ2Uoc2VjdGlvbilcXFwiIHN0eWxlPVxcXCJmbGV4LWJhc2lzOjMwJTtcXFwiPjwvYXBwLWdhbGxlcnktc2lkZW1lbnU+XFxyXFxuICAgICAgICAgICAgPGFwcC1nYWxsZXJ5LXByZXZpZXdlciBpbWFnZXM9XFxcIiRjdHJsLmltYWdlc1xcXCIgIHN0eWxlPVxcXCJmbGV4LWJhc2lzOjcwJTtcXFwiPjwvYXBwLWdhbGxlcnktcHJldmlld2VyPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICBcXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9zZWN0aW9uPlxcclxcblwiOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbXBvbmVudCgnYXBwR2FsbGVyeScsIHtcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9nYWxsZXJ5Lmh0bWwnKSxcclxuICAgICAgICBjb250cm9sbGVyOiBbJ1NlY3Rpb25zU2VydmljZScsICdQcmV2aWV3ZWRJbWFnZXNTZXJ2aWNlJywgZnVuY3Rpb24oU2VjdGlvbnNTZXJ2aWNlLCBQcmV2aWV3ZWRJbWFnZXNTZXJ2aWNlKXtcclxuICAgICAgICAgICAgbGV0IGN0cmwgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLiRvbkluaXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBTZWN0aW9uc1NlcnZpY2UuZ2V0U2VjdGlvbnMoKS50aGVuKHNlY3Rpb25zID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzZWN0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3RybC5zZWN0aW9ucyA9IHNlY3Rpb25zO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBQcmV2aWV3ZWRJbWFnZXNTZXJ2aWNlLmdldEltYWdlc0J5U2VjdGlvbigncGVvcGxlJylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuaW1hZ2VzID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uU2VjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKHNlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBQcmV2aWV3ZWRJbWFnZXNTZXJ2aWNlLmdldEltYWdlc0J5U2VjdGlvbihzZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5pbWFnZXMgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XVxyXG4gICAgfSlcclxuXHJcbnJlcXVpcmUoJy4vZ2FsbGVyeS5jc3MnKTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zaG93Y2FzZSB7XFxyXFxuICAgIGhlaWdodDogODB2aDtcXHJcXG4gICAgYmFja2dyb3VuZDogdXJsKC9hc3NldHMvaW1nL3N0cmVldC5qcGcpIG5vLXJlcGVhdCAwIC0yMHZoO1xcclxcbiAgICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IGZpeGVkO1xcclxcbiAgICBcXHJcXG59XFxyXFxuXFxyXFxuLnNob3djYXNlLW91dGVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGhlaWdodDogaW5oZXJpdDtcXHJcXG59XFxyXFxuLnNob3djYXNlLWluZm8tY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcbi5zaG93Y2FzZS13ZWxjb21lIHtcXHJcXG4gICAgY29sb3I6ICNmYWZhZmE7XFxyXFxuICAgIGZvbnQtc2l6ZTogN3JlbTtcXHJcXG4gICAgbGV0dGVyLXNwYWNpbmc6IC4zcmVtO1xcclxcbiAgICB0ZXh0LXNoYWRvdzogMnB4IDJweCA0cHggIzAwMDAwMDtcXHJcXG59XFxyXFxuXFxyXFxuLnNob3djYXNlLWNyZWF0b3Ige1xcclxcbiAgICBjb2xvcjogI2ZhZmFmYTtcXHJcXG4gICAgZm9udC1zaXplOiA0cmVtO1xcclxcbiAgICB0ZXh0LXNoYWRvdzogMnB4IDJweCA0cHggIzAwMDAwMDtcXHJcXG59XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc2hvd2Nhc2UuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3Nob3djYXNlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc2hvd2Nhc2UuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGNsYXNzPVxcXCJzaG93Y2FzZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzaG93Y2FzZS1vdXRlclxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2hvd2Nhc2UtaW5mby1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XFxcInNob3djYXNlLXdlbGNvbWVcXFwiPldlbGNvbWUgdG8gdGhlIEdhbGxlcnk8L2gxPlxcclxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwic2hvd2Nhc2UtY3JlYXRvclxcXCI+bWFkZSBieSBBbmF0b2xpaSBZYXRzZW5rbzwvcD5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L3NlY3Rpb24+XFxyXFxuPGFwcC1nYWxsZXJ5PjwvYXBwLWdhbGxlcnk+XCI7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29tcG9uZW50KCdhcHBTaG93Y2FzZScsIHtcclxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zaG93Y2FzZS5odG1sJyksXHJcbiAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbnJlcXVpcmUoJy4vc2hvd2Nhc2UuY3NzJyk7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoZWFkZXIgY2xhc3M9XFxcIm5hdl9iYXZcXFwiPlxcclxcbiAgPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwibmF2X2NvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwicmVzcG9uc2l2ZV90ZXh0XFxcIj5cXHJcXG4gICAgICAgIDxoMz48c3BhbiBzdHlsZT1cXFwiY29sb3I6IzFFOTBGRjtcXFwiPlJlc3BvbnNpdmU8L3NwYW4+IGdhbGxlcnk8L2gzPlxcclxcbiAgICAgIDwvZGl2PlxcclxcbiAgICAgIDxuYXYgY2xhc3M9XFxcIm5hdmlnYXRpb25fY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgIDx1bCBjbGFzcz1cXFwibGlzdFxcXCI+XFxyXFxuICAgICAgICAgIDxsaT48YSB1aS1zcmVmPVxcXCJob21lXFxcIj5IT01FPC9hPjwvbGk+XFxyXFxuICAgICAgICAgIDxsaT48YSB1aS1zcmVmPVxcXCJob21lXFxcIj5BQk9VVCBVUzwvYT48L2xpPlxcclxcbiAgICAgICAgICA8bGk+PGEgdWktc3JlZj1cXFwiaG9tZVxcXCI+U0lHTiBJTjwvYT48L2xpPlxcclxcbiAgICAgICAgICA8bGk+PGEgdWktc3JlZj1cXFwiaG9tZVxcXCI+U0lHTiBVUDwvYT48L2xpPlxcclxcbiAgICAgICAgPC91bD5cXHJcXG4gICAgICA8L25hdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2Rpdj5cXHJcXG48L2hlYWRlcj5cIjsiLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5hdl9iYXYge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzU0MjRhO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAjMUU5MEZGIDNweCBzb2xpZDtcXHJcXG4gICAgaGVpZ2h0OiA4cmVtO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4ubmF2X2NvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgaGVpZ2h0OiBpbmhlcml0O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzcG9uc2l2ZV90ZXh0IHtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLnJlc3BvbnNpdmVfdGV4dCBoMyB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMy4ycmVtO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5saXN0IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3QgbGkge1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG4gICAgcGFkZGluZzogMXJlbSAycmVtO1xcclxcbn0gXFxyXFxuXFxyXFxuLmxpc3QgPiBsaSA+IGE6bGluayxcXHJcXG4ubGlzdCA+IGxpID4gYTp2aXNpdGVkLFxcclxcbi5saXN0ID4gbGkgPiBhOmFjdGl2ZSAge1xcclxcbiAgICBjb2xvcjogI2ZhZmFmYTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4ubGlzdCA+IGxpID4gYTpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiAjMUU5MEZGO1xcclxcbiAgICBcXHJcXG59XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYXBwTmF2QmFyLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9hcHBOYXZCYXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9hcHBOYXZCYXIuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwicmVxdWlyZSgnLi9hcHBOYXZCYXIuY3NzJyk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJykuY29tcG9uZW50KCdhcHBOYXZCYXInLCB7XHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9hcHBOYXZCYXIuaHRtbCcpLFxyXG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24oKXtcclxuICAgICAgICBcclxuICAgIH1cclxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInXSk7XHJcblxyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpe1xyXG5cclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcclxuXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgIC5zdGF0ZSh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdob21lJyxcclxuICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGFwcC1zaG93Y2FzZT48L2FwcC1zaG93Y2FzZT4nXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoe1xyXG4gICAgICAgICAgICBuYW1lOiAnc2VjdGlvbicsXHJcbiAgICAgICAgICAgIHVybDogJy9zZWN0aW9uLzpzZWN0aW9uJyxcclxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8YXBwLXNlY3Rpb24gaW1hZ2VzPVwidm0uaXRlbXNcIiBzZWN0aW9uPVwidm0uc2VjdGlvblwiPjwvYXBwLXNlY3Rpb24+JyxcclxuICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWdnZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHN0YXRlUGFyYW1zJywgJ1ByZXZpZXdlZEltYWdlc1NlcnZpY2UnLCBmdW5jdGlvbiAoJHN0YXRlUGFyYW1zLCBQcmV2aWV3ZWRJbWFnZXNTZXJ2aWNlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSAnJztcclxuICAgICAgICAgICAgICAgIGxldCBjdHJsID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHRoaXMuJG9uSW5pdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBQcmV2aWV3ZWRJbWFnZXNTZXJ2aWNlLmdldEltYWdlc0J5U2VjdGlvbigkc3RhdGVQYXJhbXMuc2VjdGlvbikudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLml0ZW1zID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwuc2VjdGlvbiA9ICRzdGF0ZVBhcmFtcy5zZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGN0cmwuaXRlbXMgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxufV0pXHJcblxyXG5cclxuLy8gcmVxdWlyZSgnLi9kaXJlY3RpdmVzL2NsaXBib2FyZC5kaXJlY3RpdmUnKTtcclxucmVxdWlyZSgnLi9jb21wb25lbnRzL2FwcC1uYXYtYmFyL2FwcE5hdkJhci5jb21wb25lbnQnKTtcclxucmVxdWlyZSgnLi9jb21wb25lbnRzL3Nob3djYXNlL3Nob3djYXNlLmNvbXBvbmVudCcpO1xyXG5yZXF1aXJlKCcuL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LmNvbXBvbmVudCcpO1xyXG5yZXF1aXJlKCcuL2NvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LXNpZGVtZW51L2dhbGxlcnktc2lkZW1lbnUuY29tcG9uZW50Jyk7XHJcbnJlcXVpcmUoJy4vY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnktcHJldmlld2VyL2dhbGxlcnktcHJldmlld2VyLmNvbXBvbmVudCcpO1xyXG5yZXF1aXJlKCcuL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5jb21wb25lbnQnKTtcclxucmVxdWlyZSgnLi9jb21wb25lbnRzL3NlY3Rpb24vc2VjdGlvbi5jb21wb25lbnQnKTtcclxuXHJcbnJlcXVpcmUoJy4vc2VydmljZXMvc2VjdGlvbnMuc2VydmljZScpO1xyXG5yZXF1aXJlKCcuL3NlcnZpY2VzL3ByZXZpZXdlZC1pbWFnZXMuc2VydmljZScpO1xyXG5cclxucmVxdWlyZSgnLi9tYWluLmNzcycpO1xyXG4vLyByZXF1aXJlKCcuL2NvbXBvbmVudHMvc2tpbGxzUGFnZS9za2lsbHMuY29tcG9uZW50Jyk7XHJcblxyXG5cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9