!function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:t})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=36)}([function(e,r,n){var t,o,s={},i=(t=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=t.apply(this,arguments)),o}),a=function(e){var r={};return function(e){if("function"==typeof e)return e();if(void 0===r[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}}(),l=null,c=0,p=[],u=n(31);function m(e,r){for(var n=0;n<e.length;n++){var t=e[n],o=s[t.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](t.parts[i]);for(;i<t.parts.length;i++)o.parts.push(b(t.parts[i],r))}else{var a=[];for(i=0;i<t.parts.length;i++)a.push(b(t.parts[i],r));s[t.id]={id:t.id,refs:1,parts:a}}}}function d(e,r){for(var n=[],t={},o=0;o<e.length;o++){var s=e[o],i=r.base?s[0]+r.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};t[i]?t[i].parts.push(a):n.push(t[i]={id:i,parts:[a]})}return n}function g(e,r){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=p[p.length-1];if("top"===e.insertAt)t?t.nextSibling?n.insertBefore(r,t.nextSibling):n.appendChild(r):n.insertBefore(r,n.firstChild),p.push(r);else if("bottom"===e.insertAt)n.appendChild(r);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(r,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var r=p.indexOf(e);r>=0&&p.splice(r,1)}function f(e){var r=document.createElement("style");return e.attrs.type="text/css",v(r,e.attrs),g(e,r),r}function v(e,r){Object.keys(r).forEach(function(n){e.setAttribute(n,r[n])})}function b(e,r){var n,t,o,s;if(r.transform&&e.css){if(!(s=r.transform(e.css)))return function(){};e.css=s}if(r.singleton){var i=c++;n=l||(l=f(r)),t=w.bind(null,n,i,!1),o=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var r=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(r,e.attrs),g(e,r),r}(r),t=function(e,r,n){var t=n.css,o=n.sourceMap,s=void 0===r.convertToAbsoluteUrls&&o;(r.convertToAbsoluteUrls||s)&&(t=u(t));o&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([t],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(i),a&&URL.revokeObjectURL(a)}.bind(null,n,r),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=f(r),t=function(e,r){var n=r.css,t=r.media;t&&e.setAttribute("media",t);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else o()}}e.exports=function(e,r){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(r=r||{}).attrs="object"==typeof r.attrs?r.attrs:{},r.singleton||"boolean"==typeof r.singleton||(r.singleton=i()),r.insertInto||(r.insertInto="head"),r.insertAt||(r.insertAt="bottom");var n=d(e,r);return m(n,r),function(e){for(var t=[],o=0;o<n.length;o++){var i=n[o];(a=s[i.id]).refs--,t.push(a)}e&&m(d(e,r),r);for(o=0;o<t.length;o++){var a;if(0===(a=t[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}};var y,x=(y=[],function(e,r){return y[e]=r,y.filter(Boolean).join("\n")});function w(e,r,n,t){var o=n?"":t.css;if(e.styleSheet)e.styleSheet.cssText=x(r,o);else{var s=document.createTextNode(o),i=e.childNodes;i[r]&&e.removeChild(i[r]),i.length?e.insertBefore(s,i[r]):e.appendChild(s)}}},function(e,r){e.exports=function(e){var r=[];return r.toString=function(){return this.map(function(r){var n=function(e,r){var n=e[1]||"",t=e[3];if(!t)return n;if(r&&"function"==typeof btoa){var o=(i=t,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),s=t.sources.map(function(e){return"/*# sourceURL="+t.sourceRoot+e+" */"});return[n].concat(s).concat([o]).join("\n")}var i;return[n].join("\n")}(r,e);return r[2]?"@media "+r[2]+"{"+n+"}":n}).join("")},r.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(t[s]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&t[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),r.push(i))}},r}},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,"*, *::before, *::after, body {\r\n    margin: 0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-size: 62.5%;\r\n}\r\n\r\n\r\n.container {\r\n    height: inherit;\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\nbody {\r\n    position: relative;\r\n    background-color: mintcream;\r\n}",""])},function(e,r,n){var t=n(2);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){angular.module("app").service("PreviewedImagesService",["$q",function(e){let r=this;r.database={nature:["https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/1027393/pexels-photo-1027393.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/983436/pexels-photo-983436.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/983436/pexels-photo-983436.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],people:["https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],women:["https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/289225/pexels-photo-289225.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/413885/pexels-photo-413885.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/104516/pexels-photo-104516.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/354972/pexels-photo-354972.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260"],rain:["https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],forest:["https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/589841/pexels-photo-589841.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260","https://images.pexels.com/photos/1034887/pexels-photo-1034887.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260"]},this.getImagesBySection=function(n){return console.log(n),e((e,t)=>{e(r.database[n])})}}])},function(e,r){angular.module("app").service("SectionsService",["$q",function(e){this.getSections=function(){return e((e,r)=>{e(["nature","people","women","rain","forest","nature","people","women","rain","forest"])})}}])},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".section-container {\r\n  margin-bottom: 10rem;\r\n}\r\n\r\n.carousel-section {}\r\n\r\n.carousel-container {}\r\n\r\n.carousel-main-image {\r\n  width: 70%;\r\n  position: relative;\r\n  margin: 0 auto ;\r\n}\r\n\r\n.carousel-section-message {\r\n  font-size: 5rem;\r\n  text-align: center;\r\n  text-transform: capitalize;\r\n  font-weight: normal;\r\n  padding: 2rem 0;\r\n  color: #1E90FF;\r\n  letter-spacing: 1rem;\r\n}\r\n\r\n.carousel-count {\r\n  font-size: 2rem;\r\n  position: absolute;\r\n  bottom:0;\r\n  right:0;\r\n  color: #fafafa;\r\n  padding: .6rem;\r\n}\r\n\r\n.carousel-preview-image {\r\n  width: 90%;\r\n  border: .3rem solid #ccc;\r\n  height: 68rem;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-color: #333;\r\n  border-top-right-radius: .5rem;\r\n  border-top-left-radius: .5rem;\r\n  margin: auto;\r\n}\r\n\r\n.clipboard-container {\r\n  position: absolute;\r\n  left: 0;\r\n}\r\n\r\n.clipboard-copy-button {\r\n  color:#fafafa;\r\n  font-size: 2rem;\r\n  padding: .6rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.clipboard-copy-button:hover {\r\n  text-decoration: underline;\r\n}\r\n.clipboard-success-message {\r\n  color:#fafafa;\r\n  font-size: 2rem;\r\n  padding: .6rem;\r\n}\r\n\r\n.carousel-actions-container {\r\n  display: flex;\r\n  top: 0;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 100%;\r\n  position: absolute;\r\n}\r\n\r\n.carousel-prev {\r\n  color: #1E90FF;\r\n  font-size: 10rem;\r\n  -webkit-user-select: none; /* Chrome/Safari */        \r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+ */\r\n  transition: all .1s;\r\n}\r\n\r\n.carousel-next {\r\n  color: #1E90FF;\r\n  font-size: 10rem;\r\n  transition: all .1s;\r\n  margin-right: 0.4rem;\r\n  -webkit-user-select: none; /* Chrome/Safari */        \r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+ */\r\n}\r\n\r\n.carousel-prev:hover,\r\n.carousel-next:hover {\r\n  cursor: pointer;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.carousel-caption-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 4rem;\r\n  width: 90%;\r\n  margin: auto;\r\n  background-color: #333;\r\n  border: 2px solid #ccc;\r\n  position: relative;\r\n  border-bottom-left-radius: .5rem;\r\n  border-bottom-right-radius: .5rem;\r\n}\r\n\r\n.carousel-caption-text {\r\n  text-transform: capitalize;\r\n  font-size: 3rem;\r\n  color: #fafafa;\r\n  letter-spacing: 1rem;\r\n}\r\n\r\n.carousel-bottomt-slider {\r\n  display: -webkit-flex;\r\n  overflow-y: hidden;\r\n  overflow-x: auto;\r\n  width: 44%;\r\n  margin: auto;\r\n  display: flex;\r\n}\r\n\r\n.carousel-bottom-item-container:not(:first-child), .carousel-bottom-item-container:not(:nth-child(3n + 1)) {\r\n  flex: 0 0 33.33%;\r\n  margin: 0 0  0 0;\r\n  height: 16rem;\r\n  border: 2px solid #ccc;\r\n  opacity: .5;\r\n}\r\n\r\n.chosen {\r\n  opacity: 1 !important;\r\n}\r\n\r\n\r\n\r\n.carousel-bottom-item-container:nth-child(3n){\r\n  margin: 0 0 0 0;\r\n}\r\n\r\n.carousel-bottom-item-container:nth-child(3n + 1), .carousel-bottom-item-container:first-child {\r\n  flex: 0 0 33.33%;\r\n  margin: 0 0 0 0;\r\n  height: 16rem;\r\n  border: 2px solid #ccc;\r\n  opacity: .5;\r\n}\r\n\r\n.carousel-bottom-item {\r\n  width: 100%;\r\n  height: 16rem;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n}\r\n\r\n.fadeArrow {\r\n  color: grey !important;\r\n}\r\n\r\n.carousel-bottom-item-container:hover {\r\n  cursor: pointer;\r\n  opacity: .9;\r\n  border-color: #1E90FF;\r\n}",""])},function(e,r,n){var t=n(6);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="section-container">\r\n  \x3c!-- Main section --\x3e\r\n  <section class="carousel-section">\r\n     \r\n    <div class="carousel-container">\r\n        \r\n      <div class="carousel-main-image">\r\n          <h2 class="carousel-section-message">{{$ctrl.section}}</h2>\r\n        \x3c!-- Main image --\x3e\r\n        <div class="carousel-preview-image" ng-style="{\'background-image\':\'url(\' + $ctrl.images[$ctrl.imgToPreview] + \')\'}"></div>\r\n\r\n        \x3c!-- Arrows section --\x3e\r\n        <div class="carousel-actions-container">\r\n          <a class="carousel-prev" ng-click="$ctrl.showPrevImage()" ng-class="{\'fadeArrow\' : $ctrl.leftDisabled }">❮</a>\r\n          <a class="carousel-next" ng-click="$ctrl.showNextImage()" ng-class="{\'fadeArrow\' : $ctrl.rightDisabled }">❯</a>\r\n        </div>\r\n        \x3c!-- Caption section  --\x3e\r\n        <div class="carousel-caption-container">\r\n          <p class="carousel-caption-text">{{$ctrl.section}}</p>\r\n          <div class="carousel-count">\r\n            <span>{{$ctrl.imgToPreview + 1}}</span>\r\n            <span>&nbsp;of&nbsp;</span>\r\n            <span>{{$ctrl.images.length}}</span>\r\n          </div>\r\n\r\n          \x3c!-- Clipboard copying section --\x3e\r\n          <div class="clipboard-container">\r\n            <p ng-if="!$ctrl.copiedSuccessfully" ng-click="$ctrl.copyToClipboard()" class="clipboard-copy-button">Copy image link</p>\r\n            <p ng-if="$ctrl.copiedSuccessfully" class="clipboard-success-message">Copying successful!</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    \x3c!-- Bottom slider section --\x3e\r\n    <div class="carousel-bottomt-slider">\r\n      <div ng-repeat="image in $ctrl.images track by $index" class="carousel-bottom-item-container" ng-class="{\'chosen\' : $index == $ctrl.imgToPreview }" ng-click="$ctrl.showChosenItem($index)">\r\n        <div class="carousel-bottom-item"   ng-style="{\'background-image\':\'url({{image}})\'}" ng-click="$ctrl.showImage(image)"></div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</section>'},function(e,r,n){angular.module("app").component("appSection",{template:n(8),bindings:{images:"<",section:"<"},controller:["$window",function(e){let r=this;r.$onInit=function(){r.leftDisabled=!0,r.rightDisabled=!1,r.imgToPreview=0,r.copiedSuccessfully=!1},r.$onChanges=function(e){e.images&&(r.images=e.images.currentValue,document.documentElement.scrollTop=0)},r.showChosenItem=function(e){r.copiedSuccessfully=!1,r.leftDisabled=0==e,r.rightDisabled=e==r.images.length-1,r.imgToPreview=e},this.showNextImage=(()=>{if(r.copiedSuccessfully=!1,r.leftDisabled=!1,r.rightDisabled=r.imgToPreview+2>=r.images.length,r.imgToPreview==r.images.length-1)return;r.imgToPreview++;let e=document.querySelector(".carousel-bottomt-slider").offsetWidth,n=r.imgToPreview/3;Number.isInteger(n)&&(document.querySelector(".carousel-bottomt-slider").scrollLeft=n*e)}),this.showPrevImage=(()=>{if(r.copiedSuccessfully=!1,r.leftDisabled=r.imgToPreview-2<0,r.rightDisabled=!1,0==r.imgToPreview)return;r.imgToPreview--;let e=document.querySelector(".carousel-bottomt-slider").offsetWidth,n=(r.imgToPreview+1)/3;Number.isInteger(n)?document.querySelector(".carousel-bottomt-slider").scrollLeft=n*e-e:document.querySelector(".carousel-bottomt-slider").scrollLeft=Math.floor(n)*e}),this.copyToClipboard=(()=>{let e=document.createElement("input"),n=document.querySelector("body");e.style.position="absolute",e.style.top="-2000rem",e.style.left="-2000rem",e.value=r.images[r.imgToPreview],n.appendChild(e),e.select(),document.execCommand("copy")?r.copiedSuccessfully=!0:console.log("error while copying to clipbaord"),n.removeChild(e)})}]}),n(7)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".footer-section {\r\n    background-color: inherit;\r\n   \r\n    \r\n}\r\n\r\n.footer-info-container {\r\n    height: 15rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.footer-info-container > h2 {\r\n    font-size: 3rem;\r\n    color: #1E90FF;\r\n}",""])},function(e,r,n){var t=n(10);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<footer class="footer-section">\r\n    <div class="footer-info-container">\r\n        <h2>All right reserved &copy; Anatolii Yatsenko</h2>\r\n    </div>\r\n</footer>'},function(e,r,n){angular.module("app").component("appFooter",{template:n(12),controller:function(){}}),n(11)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".gallery-previewer {\r\n    background-color: white;\r\n}\r\n\r\n\r\n\r\n.gallery-previewer-composition {\r\n    display: block;\r\n    position: relative;\r\n    width:50%;\r\n    margin: auto;\r\n    margin-top: 5rem;\r\n}\r\n\r\n.gallery-previewer-example {\r\n    width: 35rem;\r\n    height: 20rem;\r\n    position: absolute;\r\n    z-index: 1;\r\n    background-size: cover;\r\n    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);\r\n    border-radius: 3px;\r\n    transition: all .2s;\r\n    outline-offset: 2rem;\r\n}\r\n\r\n.gallery-previewer-example:hover {\r\n    z-index: 100;\r\n    outline: 1.5rem solid darkslategrey;\r\n    box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);\r\n    transform: scale(1.05) translateY(-0.5rem);\r\n}\r\n\r\n.gallery-previewer-example:nth-child(1){\r\n    top:0;\r\n    left:0;\r\n\r\n}\r\n\r\n.gallery-previewer-example:nth-child(2){\r\n    \r\n    top: 13rem;\r\n    left: 11rem;\r\n}\r\n\r\n.gallery-previewer-example:nth-child(3){\r\n    \r\n    top: 4rem;\r\n    left: 24rem;\r\n}",""])},function(e,r,n){var t=n(14);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="gallery-previewer">\r\n    <div class="gallery-previewer-container">\r\n        <div class="gallery-previewer-composition">\r\n            <img ng-repeat="image in $ctrl.images track by $index | limitTo: 3" style=\'background-image:url({{image}})\'  alt="" class="gallery-previewer-example">\r\n            \x3c!-- <img ng-repeat="image in $ctrl.images" ng-src="../../../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n            \x3c!-- <img src="./assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example">\r\n            <img src="../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n        </div>\r\n    </div>\r\n</section>'},function(e,r,n){angular.module("app").component("appGalleryPreviewer",{template:n(16),bindings:{images:"<"},controller:function(){}}),n(15)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,'.gallery-sidemenu {\r\n    flex-basis: 30%;\r\n    background-color: inherit;\r\n}\r\n\r\n.gallery-sidemenu-link-container {\r\n    margin-top: 8rem;\r\n    padding-left: 32rem;\r\n}\r\n\r\n.gallery-sidemenu-link-list {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    height: 18rem;\r\n    overflow: hidden;\r\n}\r\n\r\n.gallery-sidemenu-link-item {\r\n    border-bottom: 1px solid #ccc;\r\n    height:25%;\r\n    position: relative;\r\n    padding: .5rem 1.5rem .5rem 1.5rem;\r\n    cursor: pointer;\r\n}\r\n\r\n.gallery-sidemenu-link-item:before {\r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 3px;\r\n    transform: scaleY(0);\r\n    transform-origin: center;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s, border .4s, background-color 0.1s;\r\n}\r\n\r\n.gallery-sidemenu-link-item:hover:before {\r\n    border-bottom: 3px solid #1E90FF;\r\n    transform: scaleY(1);\r\n    width: 100%;\r\n}\r\n\r\n.gallery-sidemenu-link-a {\r\n    position: relative;\r\n    color: #333333;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    width: 18rem;\r\n    font-style: italic;\r\n    text-transform: capitalize;\r\n    letter-spacing: .3rem;\r\n    font-size: 3rem;\r\n    font-weight: 100;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(1) {}\r\n\r\n.gallery-sidemenu-link-list:nth-child(2) {}\r\n\r\n.gallery-sidemenu-link-list:nth-child(3) {}\r\n\r\n.gallery-sidemenu-link-list:nth-child(4) {}\r\n\r\n.gallery-sidemenu-link-list:nth-child(5) {}\r\n\r\n.down-button,\r\n.up-button {\r\n   display: block;\r\n   margin: auto;\r\n    width: 3rem;\r\n    fill: #1E90FF;\r\n    margin-left: 9rem;\r\n    height: 3rem;\r\n    cursor: pointer;\r\n    transition: all .4s ease-in;\r\n}\r\n\r\n.up-button:hover {\r\n    transform: rotateZ(360deg) scale(1.2);\r\n}\r\n\r\n.down-button {\r\n    margin-top: 1rem;\r\n}\r\n.down-button:hover {\r\n    transform: rotateZ(360deg) scale(1.2);\r\n}',""])},function(e,r,n){var t=n(18);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<ng-include src="\'assets/img/symbol-defs.svg\'"></ng-include>\r\n<section class="gallery-sidemenu">\r\n    <div class="gallery-sidemenu-link-container">\r\n            <svg ng-click="$ctrl.showPrevSections()" class="up-button"><use xlink:href="#icon-circle-up"></use></svg>\r\n        <ul class="gallery-sidemenu-link-list">\r\n            <li class="gallery-sidemenu-link-item" ng-repeat="section in $ctrl.sections track by $index">\r\n                <a ui-sref="section({section: section})" ng-mouseover="$ctrl.getImages({section:section});  $ctrl.startAnimation($event)"\r\n                    class="gallery-sidemenu-link-a">{{section}}</a>\r\n            </li>\r\n\r\n        </ul>\r\n        \r\n            <svg ng-click="$ctrl.showNextSections()" class="down-button"><use xlink:href="#icon-circle-down"></use></svg>\r\n        \r\n    </div>\r\n</section>'},function(e,r,n){angular.module("app").component("appGallerySidemenu",{template:n(20),bindings:{sections:"<",getImages:"&"},controller:function(){let e=this;this.$onInit=(()=>{e.sortedSections=[],e.currentSection="",e.topDisabled=!1,e.bottomDisabled=!1}),this.$onChanges=(r=>{if(void 0!=r.sections.currentValue){e.sections=r.sections.currentValue;var n,t;for(e.sortedSections=[],n=0,t=e.sections.length;n<t;n+=3)e.sortedSections.push(e.sections.slice(n,n+3))}}),this.showNextSections=(()=>{let e=document.querySelector(".gallery-sidemenu-link-list"),r=e.offsetHeight;e.scrollTop=r}),this.showPrevSections=(()=>{let e=document.querySelector(".gallery-sidemenu-link-list"),r=e.offsetHeight;e.scrollTop=document.documentElement.scrollTop-r})}}),n(19)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".gallery-section {\r\n    background-color: inherit;\r\n    height: 100vh;\r\n}\r\n.gallery-heading {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 25rem;\r\n}\r\n.gallery-heading h2{\r\n    color: #1E90FF;\r\n    font-weight: 400;\r\n    text-shadow: 2px 4px 2px #ccc;\r\n    font-size: 6rem;\r\n    padding: 2rem;\r\n}\r\n\r\n.gallery-folder {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    \r\n}\r\n",""])},function(e,r,n){var t=n(22);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="gallery-section">\r\n    <div class="container">\r\n        <div class="gallery-heading">\r\n            <h2>Gallery of your dream</h2>\r\n        </div>\r\n        <div class="gallery-folder">\r\n            <app-gallery-sidemenu sections="$ctrl.sections" get-images="$ctrl.onSectionChange(section)" style="flex-basis:30%;"></app-gallery-sidemenu>\r\n            <app-gallery-previewer images="$ctrl.images"  style="flex-basis:70%;"></app-gallery-previewer>\r\n        </div>\r\n        \r\n    </div>\r\n</section>\r\n'},function(e,r,n){angular.module("app").component("appGallery",{template:n(24),controller:["SectionsService","PreviewedImagesService",function(e,r){let n=this;this.$onInit=function(){e.getSections().then(e=>{console.log(e),n.sections=e}),r.getImagesBySection("people").then(e=>{n.images=e})},this.onSectionChange=function(e){console.log(e),r.getImagesBySection(e).then(e=>{n.images=e})}}]}),n(23)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".showcase {\r\n    height: 80vh;\r\n    background: url(/assets/img/street.jpg) no-repeat 0 -20vh;\r\n    background-attachment: fixed;\r\n    \r\n}\r\n\r\n.showcase-outer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: inherit;\r\n}\r\n.showcase-info-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.showcase-welcome {\r\n    color: #fafafa;\r\n    font-size: 7rem;\r\n    letter-spacing: .3rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}\r\n\r\n.showcase-creator {\r\n    color: #fafafa;\r\n    font-size: 4rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}",""])},function(e,r,n){var t=n(26);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="showcase">\r\n    <div class="container">\r\n        <div class="showcase-outer">\r\n            <div class="showcase-info-container">\r\n                <h1 class="showcase-welcome">Welcome to the Gallery</h1>\r\n                <p class="showcase-creator">made by Anatolii Yatsenko</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n<app-gallery></app-gallery>'},function(e,r,n){angular.module("app").component("appShowcase",{template:n(28),controller:function(){}}),n(27)},function(e,r){e.exports='<header class="nav_bav">\r\n  <div class="container">\r\n    <div class="nav_container">\r\n      <div class="responsive_text">\r\n        <h3><span style="color:#1E90FF;">Responsive</span> gallery</h3>\r\n      </div>\r\n      <nav class="navigation_container">\r\n        <ul class="list">\r\n          <li><a ui-sref="home">HOME</a></li>\r\n          <li><a ui-sref="home">ABOUT US</a></li>\r\n          <li><a ui-sref="home">SIGN IN</a></li>\r\n          <li><a ui-sref="home">SIGN UP</a></li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</header>'},function(e,r){e.exports=function(e){var r="undefined"!=typeof window&&window.location;if(!r)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=r.protocol+"//"+r.host,t=n+r.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,r){var o,s=r.trim().replace(/^"(.*)"$/,function(e,r){return r}).replace(/^'(.*)'$/,function(e,r){return r});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:t+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".nav_bav {\r\n    background-color: #35424a;\r\n    border-bottom: #1E90FF 3px solid;\r\n    height: 8rem;\r\n}\r\n\r\n\r\n.nav_container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: inherit;\r\n}\r\n\r\n.responsive_text {\r\n\r\n}\r\n\r\n.responsive_text h3 {\r\n    font-size: 3.2rem;\r\n    color: white;\r\n}\r\n\r\n.list {\r\n    display: flex;\r\n    list-style: none;\r\n}\r\n\r\n.list li {\r\n    color: white;\r\n    font-size: 2rem;\r\n    padding: 1rem 2rem;\r\n} \r\n\r\n.list > li > a:link,\r\n.list > li > a:visited,\r\n.list > li > a:active  {\r\n    color: #fafafa;\r\n    text-decoration: none;\r\n}\r\n\r\n.list > li > a:hover {\r\n    color: #1E90FF;\r\n    \r\n}",""])},function(e,r,n){var t=n(32);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r,n){n(33),angular.module("app").component("appNavBar",{template:n(30),controller:function(){}})},function(e,r,n){e.exports=n.p+"5dee984194887c5dda055f415f52311b.svg"},function(e,r,n){angular.module("app",["ui.router"]),angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,r){r.otherwise("/"),e.state({name:"home",url:"/",template:"<app-showcase></app-showcase>"}).state({name:"section",url:"/section/:section",template:'<app-section images="vm.items" section="vm.section"></app-section>',resolve:{data:function(){}},controller:["$stateParams","PreviewedImagesService",function(e,r){this.items="";let n=this;this.$onInit=(()=>{r.getImagesBySection(e.section).then(e=>{console.log(e),n.items=e}),n.section=e.section})}],controllerAs:"vm"})}]),n(35),n(34),n(29),n(25),n(21),n(17),n(13),n(9),n(5),n(4),n(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,