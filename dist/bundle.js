!function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:t})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=35)}([function(e,r,n){var t,o,i={},s=(t=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=t.apply(this,arguments)),o}),a=function(e){var r={};return function(e){if("function"==typeof e)return e();if(void 0===r[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}}(),l=null,c=0,p=[],u=n(31);function m(e,r){for(var n=0;n<e.length;n++){var t=e[n],o=i[t.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](t.parts[s]);for(;s<t.parts.length;s++)o.parts.push(b(t.parts[s],r))}else{var a=[];for(s=0;s<t.parts.length;s++)a.push(b(t.parts[s],r));i[t.id]={id:t.id,refs:1,parts:a}}}}function d(e,r){for(var n=[],t={},o=0;o<e.length;o++){var i=e[o],s=r.base?i[0]+r.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};t[s]?t[s].parts.push(a):n.push(t[s]={id:s,parts:[a]})}return n}function g(e,r){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=p[p.length-1];if("top"===e.insertAt)t?t.nextSibling?n.insertBefore(r,t.nextSibling):n.appendChild(r):n.insertBefore(r,n.firstChild),p.push(r);else if("bottom"===e.insertAt)n.appendChild(r);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(r,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var r=p.indexOf(e);r>=0&&p.splice(r,1)}function f(e){var r=document.createElement("style");return e.attrs.type="text/css",v(r,e.attrs),g(e,r),r}function v(e,r){Object.keys(r).forEach(function(n){e.setAttribute(n,r[n])})}function b(e,r){var n,t,o,i;if(r.transform&&e.css){if(!(i=r.transform(e.css)))return function(){};e.css=i}if(r.singleton){var s=c++;n=l||(l=f(r)),t=w.bind(null,n,s,!1),o=w.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var r=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(r,e.attrs),g(e,r),r}(r),t=function(e,r,n){var t=n.css,o=n.sourceMap,i=void 0===r.convertToAbsoluteUrls&&o;(r.convertToAbsoluteUrls||i)&&(t=u(t));o&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([t],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,r),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=f(r),t=function(e,r){var n=r.css,t=r.media;t&&e.setAttribute("media",t);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else o()}}e.exports=function(e,r){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(r=r||{}).attrs="object"==typeof r.attrs?r.attrs:{},r.singleton||"boolean"==typeof r.singleton||(r.singleton=s()),r.insertInto||(r.insertInto="head"),r.insertAt||(r.insertAt="bottom");var n=d(e,r);return m(n,r),function(e){for(var t=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,t.push(a)}e&&m(d(e,r),r);for(o=0;o<t.length;o++){var a;if(0===(a=t[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete i[a.id]}}}};var y,x=(y=[],function(e,r){return y[e]=r,y.filter(Boolean).join("\n")});function w(e,r,n,t){var o=n?"":t.css;if(e.styleSheet)e.styleSheet.cssText=x(r,o);else{var i=document.createTextNode(o),s=e.childNodes;s[r]&&e.removeChild(s[r]),s.length?e.insertBefore(i,s[r]):e.appendChild(i)}}},function(e,r){e.exports=function(e){var r=[];return r.toString=function(){return this.map(function(r){var n=function(e,r){var n=e[1]||"",t=e[3];if(!t)return n;if(r&&"function"==typeof btoa){var o=(s=t,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=t.sources.map(function(e){return"/*# sourceURL="+t.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(r,e);return r[2]?"@media "+r[2]+"{"+n+"}":n}).join("")},r.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(t[i]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&t[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),r.push(s))}},r}},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,"*, *::before, *::after, body {\r\n    margin: 0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-size: 62.5%;\r\n}\r\n\r\n\r\n.container {\r\n    height: inherit;\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\nbody {\r\n    background-color: mintcream;\r\n}",""])},function(e,r,n){var t=n(2);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){angular.module("app").service("PreviewedImagesService",["$q",function(e){let r=this;r.database={nature:["https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/188029/pexels-photo-188029.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],people:["https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/574177/pexels-photo-574177.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],women:["https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/324658/pexels-photo-324658.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],rain:["https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"],forest:["https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260"]},this.getImagesBySection=function(n){return console.log(n),e((e,t)=>{e(r.database[n])})}}])},function(e,r){angular.module("app").service("SectionsService",["$q",function(e){this.getSections=function(){return e((e,r)=>{e(["nature","people","women","rain","forest"])})}}])},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".section-container {\r\n  margin-bottom: 10rem;\r\n}\r\n\r\n.carousel-section {}\r\n\r\n.carousel-container {}\r\n\r\n.carousel-main-image {\r\n  width: 82%;\r\n  position: relative;\r\n  margin: 12rem auto 0 auto;\r\n}\r\n\r\n.carousel-count {\r\n  position: absolute;\r\n  font-size: 2rem;\r\n}\r\n\r\n.carousel-preview-image {\r\n  width: 92%;\r\n  border: .3rem solid #ccc;\r\n  \r\n  height: 76rem;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-color: #333;\r\n  margin: auto;\r\n}\r\n\r\n.carousel-actions-container {\r\n  display: flex;\r\n  top: 0;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 100%;\r\n  position: absolute;\r\n}\r\n\r\n.carousel-prev {\r\n  color: #1E90FF;\r\n  font-size: 10rem;\r\n  -webkit-user-select: none; /* Chrome/Safari */        \r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+ */\r\n  transition: all .1s;\r\n}\r\n\r\n.carousel-next {\r\n  color: #1E90FF;\r\n  font-size: 10rem;\r\n  transition: all .1s;\r\n  margin-right: 0.4rem;\r\n  -webkit-user-select: none; /* Chrome/Safari */        \r\n  -moz-user-select: none; /* Firefox */\r\n  -ms-user-select: none; /* IE10+ */\r\n}\r\n\r\n.carousel-prev:hover,\r\n.carousel-next:hover {\r\n  cursor: pointer;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.carousel-caption-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 4rem;\r\n  width: 92%;\r\n  margin: auto;\r\n  background-color: #333;\r\n  border: 2px solid #ccc;\r\n}\r\n\r\n.carousel-caption-text {\r\n  \r\n  font-size: 3rem;\r\n  color: #fafafa;\r\n}\r\n\r\n.carousel-bottomt-slider {\r\n  display: -webkit-flex;\r\n  overflow-y: hidden;\r\n  overflow-x: auto;\r\n  width: 56%;\r\n  margin: auto;\r\n  display: flex;\r\n}\r\n\r\n.carousel-bottom-item-container:not(:first-child), .carousel-bottom-item-container:not(:nth-child(3n + 1)) {\r\n  flex: 0 0 33.33%;\r\n  margin: 0 0  0 0;\r\n  height: 20rem;\r\n  border: 2px solid #ccc;\r\n  opacity: .5;\r\n}\r\n\r\n.chosen {\r\n  opacity: 1 !important;\r\n  \r\n}\r\n\r\n\r\n\r\n.carousel-bottom-item-container:nth-child(3n){\r\n  margin: 0 0 0 0;\r\n}\r\n\r\n.carousel-bottom-item-container:nth-child(3n + 1), .carousel-bottom-item-container:first-child {\r\n  flex: 0 0 33.33%;\r\n  margin: 0 0 0 0;\r\n  height: 20rem;\r\n  border: 2px solid #ccc;\r\n  opacity: .5;\r\n}\r\n\r\n.carousel-bottom-item {\r\n  width: 100%;\r\n  height: 20rem;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n}\r\n\r\n.fadeArrow {\r\n  color: grey !important;\r\n}\r\n\r\n.carousel-bottom-item-container:hover {\r\n  cursor: pointer;\r\n  opacity: .9;\r\n  border-color: #1E90FF;\r\n}",""])},function(e,r,n){var t=n(6);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="section-container">\r\n\r\n\r\n\r\n  \x3c!-- TODO: Clipboard copying here --\x3e\r\n  <section class="carousel-section">\r\n    <div class="carousel-container">\r\n      <div class="carousel-main-image">\r\n        <div class="carousel-count">1 / 6</div>\r\n        <div class="carousel-preview-image" ng-style="{\'background-image\':\'url(\' + $ctrl.images[$ctrl.imgToPreview] + \')\'}"></div>\r\n\r\n\r\n        <div class="carousel-actions-container">\r\n          <a class="carousel-prev" ng-click="$ctrl.showPrevImage()" ng-class="{\'fadeArrow\' : $ctrl.leftDisabled }">❮</a>\r\n          <a class="carousel-next" ng-click="$ctrl.showNextImage()" ng-class="{\'fadeArrow\' : $ctrl.rightDisabled }">❯</a>\r\n        </div>\r\n\r\n        <div class="carousel-caption-container">\r\n          <p class="carousel-caption-text">hello</p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n    <div class="carousel-bottomt-slider">\r\n      <div ng-repeat="image in $ctrl.images track by $index" class="carousel-bottom-item-container" ng-class="{\'chosen\' : $index == $ctrl.imgToPreview }" ng-click="$ctrl.showExectItem($index)">\r\n        <div class="carousel-bottom-item"   ng-style="{\'background-image\':\'url({{image}})\'}" ng-click="$ctrl.showImage(image)"></div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n\r\n\r\n</section>\r\n\x3c!-- \r\n  <div>\r\n    <ul>\r\n      <li ng-repeat="x in $ctrl.sections track by $index">{{x}}</li>\r\n    </ul>\r\n\r\n    <div>\r\n      <h2>Click button to add link to the clipboard</h2>\r\n      <h2>Link was added to the clipboard</h2>\r\n    </div>\r\n    <div class="copy-to-clipboard-container">\r\n      <input type="text" class="copy-to-clipboard-input">\r\n      <button ng-click="$ctrl.copyToClipboard()" class="copy-to-clipboard-button">Copy</button>\r\n    </div>\r\n  </div>\r\n\r\n</section> --\x3e'},function(e,r,n){angular.module("app").component("appSection",{template:n(8),bindings:{images:"<"},controller:function(){let e=this;e.copiedSuccessful=!1,e.$onInit=function(){e.leftDisabled=!0,e.rightDisabled=!1,console.log(e.imgToPreview),console.log(e.images),e.imgToPreview=0},e.$onChanges=function(r){r.images&&(e.images=r.images.currentValue)},e.showExectItem=function(r){console.log(r),e.leftDisabled=0==r,e.rightDisabled=r==e.images.length-1,e.imgToPreview=r},this.showNextImage=(()=>{if(e.leftDisabled=!1,e.rightDisabled=e.imgToPreview+2>=e.images.length,e.imgToPreview==e.images.length-1)return;e.imgToPreview++;let r=document.querySelector(".carousel-bottomt-slider").offsetWidth;console.log("width",r);let n=.33*r;console.log("elemW",n);let t=e.imgToPreview/3;Number.isInteger(t)&&(document.querySelector(".carousel-bottomt-slider").scrollLeft=t*r)}),this.showPrevImage=(()=>{if(e.leftDisabled=e.imgToPreview-2<0,e.rightDisabled=!1,0==e.imgToPreview)return;e.imgToPreview--;let r=document.querySelector(".carousel-bottomt-slider").offsetWidth;console.log("width",r);let n=.33*r;console.log("elemW",n);let t=(e.imgToPreview+1)/3;Number.isInteger(t)?document.querySelector(".carousel-bottomt-slider").scrollLeft=t*r-r:document.querySelector(".carousel-bottomt-slider").scrollLeft=Math.floor(t)*r}),this.copyToClipboard=function(){document.querySelector(".copy-to-clipboard-input").select(),document.execCommand("copy")?e.copiedSuccessful=!0:console.log("error while copying to clipbaord")}}}),n(7)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".footer-section {\r\n    background-color: #eeeeee;\r\n   \r\n    \r\n}\r\n\r\n.footer-info-container {\r\n    height: 15rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.footer-info-container > h2 {\r\n    font-size: 3rem;\r\n    color: #1E90FF;\r\n}",""])},function(e,r,n){var t=n(10);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<footer class="footer-section">\r\n    <div class="footer-info-container">\r\n        <h2>All right reserved &copy; Anatolii Yatsenko</h2>\r\n    </div>\r\n</footer>'},function(e,r,n){angular.module("app").component("appFooter",{template:n(12),controller:function(){}}),n(11)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".gallery-previewer {\r\n    background-color: white;\r\n}\r\n\r\n\r\n\r\n.gallery-previewer-composition {\r\n    display: block;\r\n    position: relative;\r\n    width:50%;\r\n    margin: auto;\r\n    margin-top: 5rem;\r\n}\r\n\r\n.gallery-previewer-example {\r\n    width: 35rem;\r\n    height: 20rem;\r\n    position: absolute;\r\n    z-index: 1;\r\n    background-size: cover;\r\n    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);\r\n    border-radius: 3px;\r\n    transition: all .2s;\r\n    outline-offset: 2rem;\r\n}\r\n\r\n.gallery-previewer-example:hover {\r\n    z-index: 100;\r\n    outline: 1.5rem solid darkslategrey;\r\n    box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);\r\n    transform: scale(1.05) translateY(-0.5rem);\r\n}\r\n\r\n.gallery-previewer-example:nth-child(1){\r\n    top:0;\r\n    left:0;\r\n\r\n}\r\n\r\n.gallery-previewer-example:nth-child(2){\r\n    \r\n    top: 13rem;\r\n    left: 11rem;\r\n}\r\n\r\n.gallery-previewer-example:nth-child(3){\r\n    \r\n    top: 4rem;\r\n    left: 24rem;\r\n}",""])},function(e,r,n){var t=n(14);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="gallery-previewer">\r\n    <div class="gallery-previewer-container">\r\n        <div class="gallery-previewer-composition">\r\n            <img ng-repeat="image in $ctrl.images track by $index | limitTo: 3" style=\'background-image:url({{image}})\'  alt="" class="gallery-previewer-example">\r\n            \x3c!-- <img ng-repeat="image in $ctrl.images" ng-src="../../../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n            \x3c!-- <img src="./assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example">\r\n            <img src="../assets/img/4k-nature-wallpaper-0049.jpg" alt="" class="gallery-previewer-example"> --\x3e\r\n        </div>\r\n    </div>\r\n</section>'},function(e,r,n){angular.module("app").component("appGalleryPreviewer",{template:n(16),bindings:{images:"<"},controller:function(){}}),n(15)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,'.gallery-sidemenu {\r\n    flex-basis: 30%;\r\n    background-color: inherit;\r\n    \r\n}\r\n\r\n.gallery-sidemenu-link-container{\r\n    margin-top: 8rem;\r\n    padding-left: 20rem;\r\n}\r\n\r\n.gallery-sidemenu-link-list{\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.gallery-sidemenu-link-item {\r\n    position: relative;\r\n    padding: .5rem 0 .5rem 1.5rem;\r\n    cursor: pointer;\r\n    /* border: 1px solid lightgrey; */\r\n}\r\n.gallery-sidemenu-link-item:after{\r\n    content: "\\2192";\r\n    position: absolute;\r\n    top: 0;\r\n    font-size: 4rem;\r\n    color: #1E90FF;\r\n    right: 20rem;\r\n    height: 100%;\r\n    opacity:0;\r\n    width: 3px;\r\n    transition: all .4s cubic-bezier(1, 0, 0, 1) 0.2s;\r\n}\r\n\r\n.gallery-sidemenu-link-item:hover:after {\r\n    right: 10%;\r\n    opacity: 1;\r\n}\r\n.gallery-sidemenu-link-item:before {\r\n    /* content: \'\';\r\n    border-bottom: 1px solid green;\r\n    position: absolute;\r\n    top:0;\r\n    left:0;\r\n    height:100%;\r\n    width:3px;\r\n    transform: scaleX(0);\r\n    transform-origin: left;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s, border-bottom .3s; */\r\n    \r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n   \r\n    left: 0;\r\n    height: 100%;\r\n    width: 3px;\r\n    /* clip-path: polygon(0 0, 1 0, 50% 50%, 100% 100%); */\r\n    /* background-color: #1E90FF; */\r\n\r\n    transform: scaleY(0);\r\n    transform-origin: center;\r\n    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,border .4s, background-color 0.1s;\r\n    \r\n}\r\n.gallery-sidemenu-link-item:hover:before{\r\n    /* transform: scaleX(1);\r\n    width: 100%; */\r\n    border-bottom: 3px solid #1E90FF;\r\n    transform: scaleY(1);\r\n    width: 100%;\r\n}\r\n/* .gallery-sidemenu-link-item:hover {\r\n    border-bottom: 1px solid #1E90FF;\r\n} */\r\n\r\n/* transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,  */\r\n.gallery-sidemenu-link-a {\r\n    position: relative;\r\n    color:#333333;\r\n    text-decoration: none;\r\n    display: block;\r\n    width:100%;\r\n    font-style: italic;\r\n    text-transform: capitalize;\r\n    letter-spacing: .3rem;\r\n    font-size: 3rem;\r\n    font-weight: 100;\r\n}\r\n.gallery-sidemenu-link-list:nth-child(1){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(2){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(3){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(4){\r\n\r\n}\r\n\r\n.gallery-sidemenu-link-list:nth-child(5){\r\n\r\n}',""])},function(e,r,n){var t=n(18);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="gallery-sidemenu">\r\n    <div class="gallery-sidemenu-link-container">\r\n        <ul class="gallery-sidemenu-link-list">\r\n            <li class="gallery-sidemenu-link-item" ng-repeat="section in $ctrl.sections"  >\r\n                <a ui-sref="section({section: section})" ng-mouseover="$ctrl.getImages({section:section});  $ctrl.startAnimation($event)" class="gallery-sidemenu-link-a">{{section}}</a>\r\n            </li>\r\n          \r\n        </ul>\r\n    </div>\r\n</section>'},function(e,r,n){angular.module("app").component("appGallerySidemenu",{template:n(20),bindings:{sections:"<",getImages:"&"},controller:function(){this.startAnimation=function(e){e.target.value}}}),n(19)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".gallery-section {\r\n    background-color: #eeeeee;\r\n    height: 100vh;\r\n}\r\n.gallery-heading {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 25rem;\r\n}\r\n.gallery-heading h2{\r\n    color: #1E90FF;\r\n    font-weight: 400;\r\n    font-size: 6rem;\r\n    padding: 2rem;\r\n}\r\n\r\n.gallery-folder {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    \r\n}\r\n",""])},function(e,r,n){var t=n(22);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="gallery-section">\r\n    <div class="container">\r\n        <div class="gallery-heading">\r\n            <h2>Gallery with different images</h2>\r\n        </div>\r\n        <div class="gallery-folder">\r\n            <app-gallery-sidemenu sections="$ctrl.sections" get-images="$ctrl.onSectionChange(section)" style="flex-basis:30%;"></app-gallery-sidemenu>\r\n            <app-gallery-previewer images="$ctrl.images"  style="flex-basis:70%;"></app-gallery-previewer>\r\n        </div>\r\n        \r\n    </div>\r\n</section>\r\n'},function(e,r,n){angular.module("app").component("appGallery",{template:n(24),controller:["SectionsService","PreviewedImagesService",function(e,r){let n=this;this.$onInit=function(){e.getSections().then(e=>{console.log(e),n.sections=e}),r.getImagesBySection("people").then(e=>{n.images=e})},this.onSectionChange=function(e){console.log(e),r.getImagesBySection(e).then(e=>{n.images=e})}}]}),n(23)},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".showcase {\r\n    height: 80vh;\r\n    background: url(/assets/img/street.jpg) no-repeat 0 -20vh;\r\n    background-attachment: fixed;\r\n    \r\n}\r\n\r\n.showcase-outer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: inherit;\r\n}\r\n.showcase-info-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n.showcase-welcome {\r\n    color: #fafafa;\r\n    font-size: 7rem;\r\n    letter-spacing: .3rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}\r\n\r\n.showcase-creator {\r\n    color: #fafafa;\r\n    font-size: 4rem;\r\n    text-shadow: 2px 2px 4px #000000;\r\n}",""])},function(e,r,n){var t=n(26);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r){e.exports='<section class="showcase">\r\n    <div class="container">\r\n        <div class="showcase-outer">\r\n            <div class="showcase-info-container">\r\n                <h1 class="showcase-welcome">Welcome to the Gallery</h1>\r\n                <p class="showcase-creator">made by Anatolii Yatsenko</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n<app-gallery></app-gallery>'},function(e,r,n){angular.module("app").component("appShowcase",{template:n(28),controller:function(){}}),n(27)},function(e,r){e.exports='<header class="nav_bav">\r\n  <div class="container">\r\n    <div class="nav_container">\r\n      <div class="responsive_text">\r\n        <h3><span style="color:#1E90FF;">Responsive</span> gallery</h3>\r\n      </div>\r\n      <nav class="navigation_container">\r\n        <ul class="list">\r\n          <li>HOME</li>\r\n          <li>ABOUT US</li>\r\n          <li>SIGN IN</li>\r\n          <li>SIGN UP</li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</header>'},function(e,r){e.exports=function(e){var r="undefined"!=typeof window&&window.location;if(!r)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=r.protocol+"//"+r.host,t=n+r.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,r){var o,i=r.trim().replace(/^"(.*)"$/,function(e,r){return r}).replace(/^'(.*)'$/,function(e,r){return r});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:t+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,r,n){(e.exports=n(1)(!1)).push([e.i,".nav_bav {\r\n    background-color: #35424a;\r\n    border-bottom: #1E90FF 3px solid;\r\n    height: 8rem;\r\n}\r\n\r\n\r\n.nav_container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: inherit;\r\n}\r\n\r\n.responsive_text {\r\n\r\n}\r\n\r\n.responsive_text h3 {\r\n    font-size: 3.2rem;\r\n    color: white;\r\n}\r\n\r\n.list {\r\n    display: flex;\r\n    list-style: none;\r\n}\r\n\r\n.list li {\r\n    color: white;\r\n    font-size: 2rem;\r\n    padding: 1rem 2rem;\r\n} ",""])},function(e,r,n){var t=n(32);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(0)(t,o);t.locals&&(e.exports=t.locals)},function(e,r,n){n(33),angular.module("app").component("appNavBar",{template:n(30),controller:function(){}})},function(e,r,n){angular.module("app",["ui.router"]),angular.module("app").config(["$stateProvider","$urlRouterProvider",function(e,r){r.otherwise("/"),e.state({name:"home",url:"/",template:"<app-showcase></app-showcase>"}).state({name:"section",url:"/section/:section",template:'<app-section images="vm.items"></app-section>',resolve:{data:function(){}},controller:["$stateParams","PreviewedImagesService",function(e,r){this.items="";let n=this;this.$onInit=(()=>{r.getImagesBySection(e.section).then(e=>{console.log(e),n.items=e})})}],controllerAs:"vm"})}]),n(34),n(29),n(25),n(21),n(17),n(13),n(9),n(5),n(4),n(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,